-- -------------------------------------------------------------
--
-- Module: hpf_adcinput
-- Generated by MATLAB(R) 8.3 and the Filter Design HDL Coder 2.9.5.
-- Generated on: 2019-11-21 16:38:12
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- ResetType: Synchronous
-- FIRAdderStyle: tree
-- OptimizeForHDL: on
-- ClockEnableInputPort: ce_i
-- ClockInputPort: clk_i
-- ResetInputPort: rst_n_i
-- UseRisingEdge: on
-- EDAScriptGeneration: off
-- AddPipelineRegisters: on
-- InputPort: data_i
-- OutputPort: data_o
-- Name: hpf_adcinput
-- ResetAssertedLevel: Active-low
-- TestBenchStimulus: impulse step ramp chirp noise 
-- GenerateHDLTestBench: off
-- LoopUnrolling: on

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Multipliers           : 7
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form Symmetric FIR
-- Filter Length     : 13
-- Stable            : Yes
-- Linear Phase      : Yes (Type 1)
-- Arithmetic        : fixed
-- Numerator         : s16,14 -> [-2 2)
-- Input             : s16,15 -> [-1 1)
-- Filter Internals  : Specify Precision
--   Output          : s16,15 -> [-1 1)
--   Tap Sum         : s17,15 -> [-2 2)
--   Product         : s32,30 -> [-2 2)
--   Accumulator     : s32,30 -> [-2 2)
--   Round Mode      : convergent
--   Overflow Mode   : wrap
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY hpf_adcinput IS
   PORT( clk_i                           :   IN    std_logic; 
         ce_i                            :   IN    std_logic; 
         rst_n_i                         :   IN    std_logic; 
         data_i                          :   IN    std_logic_vector(15 DOWNTO 0); -- sfix16_En15
         data_o                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
         );

END hpf_adcinput;


----------------------------------------------------------------
--Module Architecture: hpf_adcinput
----------------------------------------------------------------
ARCHITECTURE rtl OF hpf_adcinput IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(15 DOWNTO 0); -- sfix16_En15
  -- Constants
  CONSTANT coeff1                         : signed(15 DOWNTO 0) := to_signed(253, 16); -- sfix16_En14
  CONSTANT coeff2                         : signed(15 DOWNTO 0) := to_signed(486, 16); -- sfix16_En14
  CONSTANT coeff3                         : signed(15 DOWNTO 0) := to_signed(250, 16); -- sfix16_En14
  CONSTANT coeff4                         : signed(15 DOWNTO 0) := to_signed(-966, 16); -- sfix16_En14
  CONSTANT coeff5                         : signed(15 DOWNTO 0) := to_signed(-3070, 16); -- sfix16_En14
  CONSTANT coeff6                         : signed(15 DOWNTO 0) := to_signed(-5154, 16); -- sfix16_En14
  CONSTANT coeff7                         : signed(15 DOWNTO 0) := to_signed(16384, 16); -- sfix16_En14

  -- Signals
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 12); -- sfix16_En15
  SIGNAL tapsum1                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand                     : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum2                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_1                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum3                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_2                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum4                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_3                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum5                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_4                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum6                          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_mcand_5                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL product6                         : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL mul_temp                         : signed(32 DOWNTO 0); -- sfix33_En29
  SIGNAL product5                         : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL mul_temp_1                       : signed(32 DOWNTO 0); -- sfix33_En29
  SIGNAL product4                         : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL mul_temp_2                       : signed(32 DOWNTO 0); -- sfix33_En29
  SIGNAL product3                         : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL mul_temp_3                       : signed(32 DOWNTO 0); -- sfix33_En29
  SIGNAL product2                         : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL mul_temp_4                       : signed(32 DOWNTO 0); -- sfix33_En29
  SIGNAL product1                         : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL mul_temp_5                       : signed(32 DOWNTO 0); -- sfix33_En29
  SIGNAL sum_final                        : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL sum1_1                           : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL add_temp                         : signed(32 DOWNTO 0); -- sfix33_En30
  SIGNAL sumpipe1_1                       : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL sum1_2                           : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL add_temp_1                       : signed(32 DOWNTO 0); -- sfix33_En30
  SIGNAL sumpipe1_2                       : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL sum1_3                           : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL add_temp_2                       : signed(32 DOWNTO 0); -- sfix33_En30
  SIGNAL sumpipe1_3                       : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL sumpipe1_4                       : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL sum2_1                           : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL add_temp_3                       : signed(32 DOWNTO 0); -- sfix33_En30
  SIGNAL sumpipe2_1                       : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL sum2_2                           : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL add_temp_4                       : signed(32 DOWNTO 0); -- sfix33_En30
  SIGNAL sumpipe2_2                       : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL sum3_1                           : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL add_temp_5                       : signed(32 DOWNTO 0); -- sfix33_En30
  SIGNAL sumpipe3_1                       : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL output_typeconvert               : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL output_register                  : signed(15 DOWNTO 0); -- sfix16_En15


BEGIN

  -- Block Statements
  Delay_Pipeline_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF rst_n_i = '0' THEN
        delay_pipeline(0 TO 12) <= (OTHERS => (OTHERS => '0'));
      ELSIF ce_i = '1' THEN
        delay_pipeline(0) <= signed(data_i);
        delay_pipeline(1 TO 12) <= delay_pipeline(0 TO 11);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  tapsum1 <= resize(delay_pipeline(0), 17) + resize(delay_pipeline(12), 17);

  tapsum_mcand <= tapsum1;

  tapsum2 <= resize(delay_pipeline(1), 17) + resize(delay_pipeline(11), 17);

  tapsum_mcand_1 <= tapsum2;

  tapsum3 <= resize(delay_pipeline(2), 17) + resize(delay_pipeline(10), 17);

  tapsum_mcand_2 <= tapsum3;

  tapsum4 <= resize(delay_pipeline(3), 17) + resize(delay_pipeline(9), 17);

  tapsum_mcand_3 <= tapsum4;

  tapsum5 <= resize(delay_pipeline(4), 17) + resize(delay_pipeline(8), 17);

  tapsum_mcand_4 <= tapsum5;

  tapsum6 <= resize(delay_pipeline(5), 17) + resize(delay_pipeline(7), 17);

  tapsum_mcand_5 <= tapsum6;

  mul_temp <= tapsum_mcand_5 * coeff6;
  product6 <= resize(mul_temp(30 DOWNTO 0) & '0', 32);

  mul_temp_1 <= tapsum_mcand_4 * coeff5;
  product5 <= resize(mul_temp_1(30 DOWNTO 0) & '0', 32);

  mul_temp_2 <= tapsum_mcand_3 * coeff4;
  product4 <= resize(mul_temp_2(30 DOWNTO 0) & '0', 32);

  mul_temp_3 <= tapsum_mcand_2 * coeff3;
  product3 <= resize(mul_temp_3(30 DOWNTO 0) & '0', 32);

  mul_temp_4 <= tapsum_mcand_1 * coeff2;
  product2 <= resize(mul_temp_4(30 DOWNTO 0) & '0', 32);

  mul_temp_5 <= tapsum_mcand * coeff1;
  product1 <= resize(mul_temp_5(30 DOWNTO 0) & '0', 32);

  add_temp <= resize(delay_pipeline(6) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33) + resize(product6, 33);
  sum1_1 <= add_temp(31 DOWNTO 0);

  add_temp_1 <= resize(product5, 33) + resize(product4, 33);
  sum1_2 <= add_temp_1(31 DOWNTO 0);

  add_temp_2 <= resize(product3, 33) + resize(product2, 33);
  sum1_3 <= add_temp_2(31 DOWNTO 0);

  temp_process1 : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF rst_n_i = '0' THEN
        sumpipe1_1 <= (OTHERS => '0');
        sumpipe1_2 <= (OTHERS => '0');
        sumpipe1_3 <= (OTHERS => '0');
        sumpipe1_4 <= (OTHERS => '0');
      ELSIF ce_i = '1' THEN
        sumpipe1_1 <= sum1_1;
        sumpipe1_2 <= sum1_2;
        sumpipe1_3 <= sum1_3;
        sumpipe1_4 <= product1;
      END IF;
    END IF; 
  END PROCESS temp_process1;

  add_temp_3 <= resize(sumpipe1_1, 33) + resize(sumpipe1_2, 33);
  sum2_1 <= add_temp_3(31 DOWNTO 0);

  add_temp_4 <= resize(sumpipe1_3, 33) + resize(sumpipe1_4, 33);
  sum2_2 <= add_temp_4(31 DOWNTO 0);

  temp_process2 : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF rst_n_i = '0' THEN
        sumpipe2_1 <= (OTHERS => '0');
        sumpipe2_2 <= (OTHERS => '0');
      ELSIF ce_i = '1' THEN
        sumpipe2_1 <= sum2_1;
        sumpipe2_2 <= sum2_2;
      END IF;
    END IF; 
  END PROCESS temp_process2;

  add_temp_5 <= resize(sumpipe2_1, 33) + resize(sumpipe2_2, 33);
  sum3_1 <= add_temp_5(31 DOWNTO 0);

  temp_process3 : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF rst_n_i = '0' THEN
        sumpipe3_1 <= (OTHERS => '0');
      ELSIF ce_i = '1' THEN
        sumpipe3_1 <= sum3_1;
      END IF;
    END IF; 
  END PROCESS temp_process3;

  sum_final <= sumpipe3_1;

  output_typeconvert <= resize(shift_right(sum_final(30 DOWNTO 0) + ( "0" & (sum_final(15) & NOT sum_final(15) & NOT sum_final(15) & NOT sum_final(15) & NOT sum_final(15) & NOT sum_final(15) & NOT sum_final(15) & NOT sum_final(15) & NOT sum_final(15) & NOT sum_final(15) & NOT sum_final(15) & NOT sum_final(15) & NOT sum_final(15) & NOT sum_final(15) & NOT sum_final(15))), 15), 16);

  Output_Register_process : PROCESS (clk_i)
  BEGIN
    IF rising_edge(clk_i) THEN
      IF rst_n_i = '0' THEN
        output_register <= (OTHERS => '0');
      ELSIF ce_i = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  data_o <= std_logic_vector(output_register);
END rtl;
