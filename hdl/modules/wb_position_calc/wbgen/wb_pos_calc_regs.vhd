---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for Position Calculation Core registers
---------------------------------------------------------------------------------------
-- File           : wb_pos_calc_regs.vhd
-- Author         : auto-generated by wbgen2 from wb_pos_calc_regs.wb
-- Created        : Tue May  7 13:21:18 2019
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE wb_pos_calc_regs.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

-- This file was hand-modified to add switching tag / data mask
-- at the end of the regsiter file and not in the middle as
-- wbgen2 does

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.wbgen2_pkg.all;

use work.pos_calc_wbgen2_pkg.all;


entity wb_pos_calc_regs is
  port (
    rst_n_i                                  : in     std_logic;
    clk_sys_i                                : in     std_logic;
    wb_adr_i                                 : in     std_logic_vector(5 downto 0);
    wb_dat_i                                 : in     std_logic_vector(31 downto 0);
    wb_dat_o                                 : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_stall_o                               : out    std_logic;
    fs_clk2x_i                               : in     std_logic;
    regs_i                                   : in     t_pos_calc_in_registers;
    regs_o                                   : out    t_pos_calc_out_registers
  );
end wb_pos_calc_regs;

architecture syn of wb_pos_calc_regs is

signal pos_calc_ds_tbt_thres_val_int            : std_logic_vector(25 downto 0);
signal pos_calc_ds_tbt_thres_val_swb            : std_logic      ;
signal pos_calc_ds_tbt_thres_val_swb_delay      : std_logic      ;
signal pos_calc_ds_tbt_thres_val_swb_s0         : std_logic      ;
signal pos_calc_ds_tbt_thres_val_swb_s1         : std_logic      ;
signal pos_calc_ds_tbt_thres_val_swb_s2         : std_logic      ;
signal pos_calc_ds_fofb_thres_val_int           : std_logic_vector(25 downto 0);
signal pos_calc_ds_fofb_thres_val_swb           : std_logic      ;
signal pos_calc_ds_fofb_thres_val_swb_delay     : std_logic      ;
signal pos_calc_ds_fofb_thres_val_swb_s0        : std_logic      ;
signal pos_calc_ds_fofb_thres_val_swb_s1        : std_logic      ;
signal pos_calc_ds_fofb_thres_val_swb_s2        : std_logic      ;
signal pos_calc_ds_monit_thres_val_int          : std_logic_vector(25 downto 0);
signal pos_calc_ds_monit_thres_val_swb          : std_logic      ;
signal pos_calc_ds_monit_thres_val_swb_delay    : std_logic      ;
signal pos_calc_ds_monit_thres_val_swb_s0       : std_logic      ;
signal pos_calc_ds_monit_thres_val_swb_s1       : std_logic      ;
signal pos_calc_ds_monit_thres_val_swb_s2       : std_logic      ;
signal pos_calc_kx_val_int                      : std_logic_vector(24 downto 0);
signal pos_calc_kx_val_swb                      : std_logic      ;
signal pos_calc_kx_val_swb_delay                : std_logic      ;
signal pos_calc_kx_val_swb_s0                   : std_logic      ;
signal pos_calc_kx_val_swb_s1                   : std_logic      ;
signal pos_calc_kx_val_swb_s2                   : std_logic      ;
signal pos_calc_ky_val_int                      : std_logic_vector(24 downto 0);
signal pos_calc_ky_val_swb                      : std_logic      ;
signal pos_calc_ky_val_swb_delay                : std_logic      ;
signal pos_calc_ky_val_swb_s0                   : std_logic      ;
signal pos_calc_ky_val_swb_s1                   : std_logic      ;
signal pos_calc_ky_val_swb_s2                   : std_logic      ;
signal pos_calc_ksum_val_int                    : std_logic_vector(24 downto 0);
signal pos_calc_ksum_val_swb                    : std_logic      ;
signal pos_calc_ksum_val_swb_delay              : std_logic      ;
signal pos_calc_ksum_val_swb_s0                 : std_logic      ;
signal pos_calc_ksum_val_swb_s1                 : std_logic      ;
signal pos_calc_ksum_val_swb_s2                 : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch01_int           : std_logic_vector(15 downto 0);
signal pos_calc_dsp_ctnr_tbt_ch01_lwb           : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch01_lwb_delay     : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch01_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch01_lwb_s0        : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch01_lwb_s1        : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch01_lwb_s2        : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch23_int           : std_logic_vector(15 downto 0);
signal pos_calc_dsp_ctnr_tbt_ch23_lwb           : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch23_lwb_delay     : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch23_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch23_lwb_s0        : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch23_lwb_s1        : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch23_lwb_s2        : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch01_int          : std_logic_vector(15 downto 0);
signal pos_calc_dsp_ctnr_fofb_ch01_lwb          : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch01_lwb_delay    : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch01_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch01_lwb_s0       : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch01_lwb_s1       : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch01_lwb_s2       : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch23_int          : std_logic_vector(15 downto 0);
signal pos_calc_dsp_ctnr_fofb_ch23_lwb          : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch23_lwb_delay    : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch23_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch23_lwb_s0       : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch23_lwb_s1       : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch23_lwb_s2       : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cic_int         : std_logic_vector(15 downto 0);
signal pos_calc_dsp_ctnr1_monit_cic_lwb         : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cic_lwb_delay   : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cic_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cic_lwb_s0      : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cic_lwb_s1      : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cic_lwb_s2      : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cfir_int        : std_logic_vector(15 downto 0);
signal pos_calc_dsp_ctnr1_monit_cfir_lwb        : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cfir_lwb_delay  : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cfir_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cfir_lwb_s0     : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cfir_lwb_s1     : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cfir_lwb_s2     : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_pfir_int        : std_logic_vector(15 downto 0);
signal pos_calc_dsp_ctnr2_monit_pfir_lwb        : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_pfir_lwb_delay  : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_pfir_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_pfir_lwb_s0     : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_pfir_lwb_s1     : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_pfir_lwb_s2     : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_fir_01_int      : std_logic_vector(15 downto 0);
signal pos_calc_dsp_ctnr2_monit_fir_01_lwb      : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_fir_01_lwb_delay : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_fir_01_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_fir_01_lwb_s0   : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_fir_01_lwb_s1   : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_fir_01_lwb_s2   : std_logic      ;
signal pos_calc_dsp_err_clr_tbt_int             : std_logic      ;
signal pos_calc_dsp_err_clr_tbt_int_delay       : std_logic      ;
signal pos_calc_dsp_err_clr_tbt_sync0           : std_logic      ;
signal pos_calc_dsp_err_clr_tbt_sync1           : std_logic      ;
signal pos_calc_dsp_err_clr_tbt_sync2           : std_logic      ;
signal pos_calc_dsp_err_clr_fofb_int            : std_logic      ;
signal pos_calc_dsp_err_clr_fofb_int_delay      : std_logic      ;
signal pos_calc_dsp_err_clr_fofb_sync0          : std_logic      ;
signal pos_calc_dsp_err_clr_fofb_sync1          : std_logic      ;
signal pos_calc_dsp_err_clr_fofb_sync2          : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part1_int     : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part1_int_delay : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part1_sync0   : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part1_sync1   : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part1_sync2   : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part2_int     : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part2_int_delay : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part2_sync0   : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part2_sync1   : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part2_sync2   : std_logic      ;
signal pos_calc_dds_cfg_valid_ch0_int           : std_logic      ;
signal pos_calc_dds_cfg_valid_ch0_int_delay     : std_logic      ;
signal pos_calc_dds_cfg_valid_ch0_sync0         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch0_sync1         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch0_sync2         : std_logic      ;
signal pos_calc_dds_cfg_test_data_int           : std_logic      ;
signal pos_calc_dds_cfg_test_data_sync0         : std_logic      ;
signal pos_calc_dds_cfg_test_data_sync1         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch1_int           : std_logic      ;
signal pos_calc_dds_cfg_valid_ch1_int_delay     : std_logic      ;
signal pos_calc_dds_cfg_valid_ch1_sync0         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch1_sync1         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch1_sync2         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch2_int           : std_logic      ;
signal pos_calc_dds_cfg_valid_ch2_int_delay     : std_logic      ;
signal pos_calc_dds_cfg_valid_ch2_sync0         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch2_sync1         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch2_sync2         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch3_int           : std_logic      ;
signal pos_calc_dds_cfg_valid_ch3_int_delay     : std_logic      ;
signal pos_calc_dds_cfg_valid_ch3_sync0         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch3_sync1         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch3_sync2         : std_logic      ;
signal pos_calc_dds_pinc_ch0_val_int            : std_logic_vector(29 downto 0);
signal pos_calc_dds_pinc_ch0_val_swb            : std_logic      ;
signal pos_calc_dds_pinc_ch0_val_swb_delay      : std_logic      ;
signal pos_calc_dds_pinc_ch0_val_swb_s0         : std_logic      ;
signal pos_calc_dds_pinc_ch0_val_swb_s1         : std_logic      ;
signal pos_calc_dds_pinc_ch0_val_swb_s2         : std_logic      ;
signal pos_calc_dds_pinc_ch1_val_int            : std_logic_vector(29 downto 0);
signal pos_calc_dds_pinc_ch1_val_swb            : std_logic      ;
signal pos_calc_dds_pinc_ch1_val_swb_delay      : std_logic      ;
signal pos_calc_dds_pinc_ch1_val_swb_s0         : std_logic      ;
signal pos_calc_dds_pinc_ch1_val_swb_s1         : std_logic      ;
signal pos_calc_dds_pinc_ch1_val_swb_s2         : std_logic      ;
signal pos_calc_dds_pinc_ch2_val_int            : std_logic_vector(29 downto 0);
signal pos_calc_dds_pinc_ch2_val_swb            : std_logic      ;
signal pos_calc_dds_pinc_ch2_val_swb_delay      : std_logic      ;
signal pos_calc_dds_pinc_ch2_val_swb_s0         : std_logic      ;
signal pos_calc_dds_pinc_ch2_val_swb_s1         : std_logic      ;
signal pos_calc_dds_pinc_ch2_val_swb_s2         : std_logic      ;
signal pos_calc_dds_pinc_ch3_val_int            : std_logic_vector(29 downto 0);
signal pos_calc_dds_pinc_ch3_val_swb            : std_logic      ;
signal pos_calc_dds_pinc_ch3_val_swb_delay      : std_logic      ;
signal pos_calc_dds_pinc_ch3_val_swb_s0         : std_logic      ;
signal pos_calc_dds_pinc_ch3_val_swb_s1         : std_logic      ;
signal pos_calc_dds_pinc_ch3_val_swb_s2         : std_logic      ;
signal pos_calc_dds_poff_ch0_val_int            : std_logic_vector(29 downto 0);
signal pos_calc_dds_poff_ch0_val_swb            : std_logic      ;
signal pos_calc_dds_poff_ch0_val_swb_delay      : std_logic      ;
signal pos_calc_dds_poff_ch0_val_swb_s0         : std_logic      ;
signal pos_calc_dds_poff_ch0_val_swb_s1         : std_logic      ;
signal pos_calc_dds_poff_ch0_val_swb_s2         : std_logic      ;
signal pos_calc_dds_poff_ch1_val_int            : std_logic_vector(29 downto 0);
signal pos_calc_dds_poff_ch1_val_swb            : std_logic      ;
signal pos_calc_dds_poff_ch1_val_swb_delay      : std_logic      ;
signal pos_calc_dds_poff_ch1_val_swb_s0         : std_logic      ;
signal pos_calc_dds_poff_ch1_val_swb_s1         : std_logic      ;
signal pos_calc_dds_poff_ch1_val_swb_s2         : std_logic      ;
signal pos_calc_dds_poff_ch2_val_int            : std_logic_vector(29 downto 0);
signal pos_calc_dds_poff_ch2_val_swb            : std_logic      ;
signal pos_calc_dds_poff_ch2_val_swb_delay      : std_logic      ;
signal pos_calc_dds_poff_ch2_val_swb_s0         : std_logic      ;
signal pos_calc_dds_poff_ch2_val_swb_s1         : std_logic      ;
signal pos_calc_dds_poff_ch2_val_swb_s2         : std_logic      ;
signal pos_calc_dds_poff_ch3_val_int            : std_logic_vector(29 downto 0);
signal pos_calc_dds_poff_ch3_val_swb            : std_logic      ;
signal pos_calc_dds_poff_ch3_val_swb_delay      : std_logic      ;
signal pos_calc_dds_poff_ch3_val_swb_s0         : std_logic      ;
signal pos_calc_dds_poff_ch3_val_swb_s1         : std_logic      ;
signal pos_calc_dds_poff_ch3_val_swb_s2         : std_logic      ;
signal pos_calc_ampfifo_monit_rst_n             : std_logic      ;
signal pos_calc_ampfifo_monit_in_int            : std_logic_vector(127 downto 0);
signal pos_calc_ampfifo_monit_out_int           : std_logic_vector(127 downto 0);
signal pos_calc_ampfifo_monit_rdreq_int         : std_logic      ;
signal pos_calc_ampfifo_monit_rdreq_int_d0      : std_logic      ;
signal pos_calc_posfifo_monit_rst_n             : std_logic      ;
signal pos_calc_posfifo_monit_in_int            : std_logic_vector(127 downto 0);
signal pos_calc_posfifo_monit_out_int           : std_logic_vector(127 downto 0);
signal pos_calc_posfifo_monit_rdreq_int         : std_logic      ;
signal pos_calc_posfifo_monit_rdreq_int_d0      : std_logic      ;
signal pos_calc_ampfifo_monit1_rst_n            : std_logic      ;
signal pos_calc_ampfifo_monit1_in_int           : std_logic_vector(127 downto 0);
signal pos_calc_ampfifo_monit1_out_int          : std_logic_vector(127 downto 0);
signal pos_calc_ampfifo_monit1_rdreq_int        : std_logic      ;
signal pos_calc_ampfifo_monit1_rdreq_int_d0     : std_logic      ;
signal pos_calc_posfifo_monit1_rst_n            : std_logic      ;
signal pos_calc_posfifo_monit1_in_int           : std_logic_vector(127 downto 0);
signal pos_calc_posfifo_monit1_out_int          : std_logic_vector(127 downto 0);
signal pos_calc_posfifo_monit1_rdreq_int        : std_logic      ;
signal pos_calc_posfifo_monit1_rdreq_int_d0     : std_logic      ;
signal pos_calc_ampfifo_monit_full_int          : std_logic      ;
signal pos_calc_ampfifo_monit_empty_int         : std_logic      ;
signal pos_calc_ampfifo_monit_usedw_int         : std_logic_vector(3 downto 0);
signal pos_calc_posfifo_monit_full_int          : std_logic      ;
signal pos_calc_posfifo_monit_empty_int         : std_logic      ;
signal pos_calc_posfifo_monit_usedw_int         : std_logic_vector(3 downto 0);
signal pos_calc_ampfifo_monit1_full_int         : std_logic      ;
signal pos_calc_ampfifo_monit1_empty_int        : std_logic      ;
signal pos_calc_ampfifo_monit1_usedw_int        : std_logic_vector(3 downto 0);
signal pos_calc_posfifo_monit1_full_int         : std_logic      ;
signal pos_calc_posfifo_monit1_empty_int        : std_logic      ;
signal pos_calc_posfifo_monit1_usedw_int        : std_logic_vector(3 downto 0);
signal pos_calc_sw_tag_en_int                   : std_logic      ;
signal pos_calc_sw_tag_en_sync0                 : std_logic      ;
signal pos_calc_sw_tag_en_sync1                 : std_logic      ;
signal pos_calc_sw_tag_desync_cnt_rst_int       : std_logic      ;
signal pos_calc_sw_tag_desync_cnt_rst_int_delay : std_logic      ;
signal pos_calc_sw_tag_desync_cnt_rst_sync0     : std_logic      ;
signal pos_calc_sw_tag_desync_cnt_rst_sync1     : std_logic      ;
signal pos_calc_sw_tag_desync_cnt_rst_sync2     : std_logic      ;
signal pos_calc_sw_tag_desync_cnt_int           : std_logic_vector(13 downto 0);
signal pos_calc_sw_tag_desync_cnt_lwb           : std_logic      ;
signal pos_calc_sw_tag_desync_cnt_lwb_delay     : std_logic      ;
signal pos_calc_sw_tag_desync_cnt_lwb_in_progress : std_logic      ;
signal pos_calc_sw_tag_desync_cnt_lwb_s0        : std_logic      ;
signal pos_calc_sw_tag_desync_cnt_lwb_s1        : std_logic      ;
signal pos_calc_sw_tag_desync_cnt_lwb_s2        : std_logic      ;
signal pos_calc_sw_data_mask_en_int             : std_logic      ;
signal pos_calc_sw_data_mask_en_sync0           : std_logic      ;
signal pos_calc_sw_data_mask_en_sync1           : std_logic      ;
signal pos_calc_sw_data_mask_samples_int        : std_logic_vector(15 downto 0);
signal pos_calc_sw_data_mask_samples_swb        : std_logic      ;
signal pos_calc_sw_data_mask_samples_swb_delay  : std_logic      ;
signal pos_calc_sw_data_mask_samples_swb_s0     : std_logic      ;
signal pos_calc_sw_data_mask_samples_swb_s1     : std_logic      ;
signal pos_calc_sw_data_mask_samples_swb_s2     : std_logic      ;
signal pos_calc_tbt_tag_en_int            : std_logic      ;
signal pos_calc_tbt_tag_en_sync0          : std_logic      ;
signal pos_calc_tbt_tag_en_sync1          : std_logic      ;
signal pos_calc_tbt_tag_dly_int           : std_logic_vector(15 downto 0);
signal pos_calc_tbt_tag_dly_swb           : std_logic      ;
signal pos_calc_tbt_tag_dly_swb_delay     : std_logic      ;
signal pos_calc_tbt_tag_dly_swb_s0        : std_logic      ;
signal pos_calc_tbt_tag_dly_swb_s1        : std_logic      ;
signal pos_calc_tbt_tag_dly_swb_s2        : std_logic      ;
signal pos_calc_tbt_tag_desync_cnt_rst_int      : std_logic      ;
signal pos_calc_tbt_tag_desync_cnt_rst_int_delay : std_logic      ;
signal pos_calc_tbt_tag_desync_cnt_rst_sync0    : std_logic      ;
signal pos_calc_tbt_tag_desync_cnt_rst_sync1    : std_logic      ;
signal pos_calc_tbt_tag_desync_cnt_rst_sync2    : std_logic      ;
signal pos_calc_tbt_tag_desync_cnt_int          : std_logic_vector(13 downto 0);
signal pos_calc_tbt_tag_desync_cnt_lwb          : std_logic      ;
signal pos_calc_tbt_tag_desync_cnt_lwb_delay    : std_logic      ;
signal pos_calc_tbt_tag_desync_cnt_lwb_in_progress : std_logic      ;
signal pos_calc_tbt_tag_desync_cnt_lwb_s0       : std_logic      ;
signal pos_calc_tbt_tag_desync_cnt_lwb_s1       : std_logic      ;
signal pos_calc_tbt_tag_desync_cnt_lwb_s2       : std_logic      ;
signal pos_calc_tbt_data_mask_ctl_en_int        : std_logic      ;
signal pos_calc_tbt_data_mask_ctl_en_sync0      : std_logic      ;
signal pos_calc_tbt_data_mask_ctl_en_sync1      : std_logic      ;
signal pos_calc_tbt_data_mask_samples_beg_int   : std_logic_vector(15 downto 0);
signal pos_calc_tbt_data_mask_samples_beg_swb   : std_logic      ;
signal pos_calc_tbt_data_mask_samples_beg_swb_delay : std_logic      ;
signal pos_calc_tbt_data_mask_samples_beg_swb_s0 : std_logic      ;
signal pos_calc_tbt_data_mask_samples_beg_swb_s1 : std_logic      ;
signal pos_calc_tbt_data_mask_samples_beg_swb_s2 : std_logic      ;
signal pos_calc_tbt_data_mask_samples_end_int   : std_logic_vector(15 downto 0);
signal pos_calc_tbt_data_mask_samples_end_swb   : std_logic      ;
signal pos_calc_tbt_data_mask_samples_end_swb_delay : std_logic      ;
signal pos_calc_tbt_data_mask_samples_end_swb_s0 : std_logic      ;
signal pos_calc_tbt_data_mask_samples_end_swb_s1 : std_logic      ;
signal pos_calc_tbt_data_mask_samples_end_swb_s2 : std_logic      ;
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(5 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
--
-- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      pos_calc_ds_tbt_thres_val_int <= "00000000000000000000000000";
      pos_calc_ds_tbt_thres_val_swb <= '0';
      pos_calc_ds_tbt_thres_val_swb_delay <= '0';
      pos_calc_ds_fofb_thres_val_int <= "00000000000000000000000000";
      pos_calc_ds_fofb_thres_val_swb <= '0';
      pos_calc_ds_fofb_thres_val_swb_delay <= '0';
      pos_calc_ds_monit_thres_val_int <= "00000000000000000000000000";
      pos_calc_ds_monit_thres_val_swb <= '0';
      pos_calc_ds_monit_thres_val_swb_delay <= '0';
      pos_calc_kx_val_int <= "0000000000000000000000000";
      pos_calc_kx_val_swb <= '0';
      pos_calc_kx_val_swb_delay <= '0';
      pos_calc_ky_val_int <= "0000000000000000000000000";
      pos_calc_ky_val_swb <= '0';
      pos_calc_ky_val_swb_delay <= '0';
      pos_calc_ksum_val_int <= "0000000000000000000000000";
      pos_calc_ksum_val_swb <= '0';
      pos_calc_ksum_val_swb_delay <= '0';
      pos_calc_dsp_ctnr_tbt_ch01_lwb <= '0';
      pos_calc_dsp_ctnr_tbt_ch01_lwb_delay <= '0';
      pos_calc_dsp_ctnr_tbt_ch01_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr_tbt_ch23_lwb <= '0';
      pos_calc_dsp_ctnr_tbt_ch23_lwb_delay <= '0';
      pos_calc_dsp_ctnr_tbt_ch23_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr_fofb_ch01_lwb <= '0';
      pos_calc_dsp_ctnr_fofb_ch01_lwb_delay <= '0';
      pos_calc_dsp_ctnr_fofb_ch01_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr_fofb_ch23_lwb <= '0';
      pos_calc_dsp_ctnr_fofb_ch23_lwb_delay <= '0';
      pos_calc_dsp_ctnr_fofb_ch23_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr1_monit_cic_lwb <= '0';
      pos_calc_dsp_ctnr1_monit_cic_lwb_delay <= '0';
      pos_calc_dsp_ctnr1_monit_cic_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr1_monit_cfir_lwb <= '0';
      pos_calc_dsp_ctnr1_monit_cfir_lwb_delay <= '0';
      pos_calc_dsp_ctnr1_monit_cfir_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr2_monit_pfir_lwb <= '0';
      pos_calc_dsp_ctnr2_monit_pfir_lwb_delay <= '0';
      pos_calc_dsp_ctnr2_monit_pfir_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr2_monit_fir_01_lwb <= '0';
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_delay <= '0';
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_in_progress <= '0';
      pos_calc_dsp_err_clr_tbt_int <= '0';
      pos_calc_dsp_err_clr_tbt_int_delay <= '0';
      pos_calc_dsp_err_clr_fofb_int <= '0';
      pos_calc_dsp_err_clr_fofb_int_delay <= '0';
      pos_calc_dsp_err_clr_monit_part1_int <= '0';
      pos_calc_dsp_err_clr_monit_part1_int_delay <= '0';
      pos_calc_dsp_err_clr_monit_part2_int <= '0';
      pos_calc_dsp_err_clr_monit_part2_int_delay <= '0';
      pos_calc_dds_cfg_valid_ch0_int <= '0';
      pos_calc_dds_cfg_valid_ch0_int_delay <= '0';
      pos_calc_dds_cfg_test_data_int <= '0';
      pos_calc_dds_cfg_valid_ch1_int <= '0';
      pos_calc_dds_cfg_valid_ch1_int_delay <= '0';
      pos_calc_dds_cfg_valid_ch2_int <= '0';
      pos_calc_dds_cfg_valid_ch2_int_delay <= '0';
      pos_calc_dds_cfg_valid_ch3_int <= '0';
      pos_calc_dds_cfg_valid_ch3_int_delay <= '0';
      pos_calc_dds_pinc_ch0_val_int <= "000000000000000000000000000000";
      pos_calc_dds_pinc_ch0_val_swb <= '0';
      pos_calc_dds_pinc_ch0_val_swb_delay <= '0';
      pos_calc_dds_pinc_ch1_val_int <= "000000000000000000000000000000";
      pos_calc_dds_pinc_ch1_val_swb <= '0';
      pos_calc_dds_pinc_ch1_val_swb_delay <= '0';
      pos_calc_dds_pinc_ch2_val_int <= "000000000000000000000000000000";
      pos_calc_dds_pinc_ch2_val_swb <= '0';
      pos_calc_dds_pinc_ch2_val_swb_delay <= '0';
      pos_calc_dds_pinc_ch3_val_int <= "000000000000000000000000000000";
      pos_calc_dds_pinc_ch3_val_swb <= '0';
      pos_calc_dds_pinc_ch3_val_swb_delay <= '0';
      pos_calc_dds_poff_ch0_val_int <= "000000000000000000000000000000";
      pos_calc_dds_poff_ch0_val_swb <= '0';
      pos_calc_dds_poff_ch0_val_swb_delay <= '0';
      pos_calc_dds_poff_ch1_val_int <= "000000000000000000000000000000";
      pos_calc_dds_poff_ch1_val_swb <= '0';
      pos_calc_dds_poff_ch1_val_swb_delay <= '0';
      pos_calc_dds_poff_ch2_val_int <= "000000000000000000000000000000";
      pos_calc_dds_poff_ch2_val_swb <= '0';
      pos_calc_dds_poff_ch2_val_swb_delay <= '0';
      pos_calc_dds_poff_ch3_val_int <= "000000000000000000000000000000";
      pos_calc_dds_poff_ch3_val_swb <= '0';
      pos_calc_dds_poff_ch3_val_swb_delay <= '0';
      regs_o.dsp_monit_updt_wr_o <= '0';
      regs_o.dsp_monit1_updt_wr_o <= '0';
      pos_calc_ampfifo_monit_rdreq_int <= '0';
      pos_calc_posfifo_monit_rdreq_int <= '0';
      pos_calc_ampfifo_monit1_rdreq_int <= '0';
      pos_calc_posfifo_monit1_rdreq_int <= '0';
      pos_calc_sw_tag_en_int <= '0';
      pos_calc_sw_tag_desync_cnt_rst_int <= '0';
      pos_calc_sw_tag_desync_cnt_rst_int_delay <= '0';
      pos_calc_sw_tag_desync_cnt_lwb <= '0';
      pos_calc_sw_tag_desync_cnt_lwb_delay <= '0';
      pos_calc_sw_tag_desync_cnt_lwb_in_progress <= '0';
      pos_calc_sw_data_mask_en_int <= '0';
      pos_calc_sw_data_mask_samples_int <= "0000000000000000";
      pos_calc_sw_data_mask_samples_swb <= '0';
      pos_calc_sw_data_mask_samples_swb_delay <= '0';
      pos_calc_tbt_tag_en_int <= '0';
      pos_calc_tbt_tag_dly_int <= "0000000000000000";
      pos_calc_tbt_tag_dly_swb <= '0';
      pos_calc_tbt_tag_dly_swb_delay <= '0';
      pos_calc_tbt_tag_desync_cnt_rst_int <= '0';
      pos_calc_tbt_tag_desync_cnt_rst_int_delay <= '0';
      pos_calc_tbt_tag_desync_cnt_lwb <= '0';
      pos_calc_tbt_tag_desync_cnt_lwb_delay <= '0';
      pos_calc_tbt_tag_desync_cnt_lwb_in_progress <= '0';
      pos_calc_tbt_data_mask_ctl_en_int <= '0';
      pos_calc_tbt_data_mask_samples_beg_int <= "0000000000000000";
      pos_calc_tbt_data_mask_samples_beg_swb <= '0';
      pos_calc_tbt_data_mask_samples_beg_swb_delay <= '0';
      pos_calc_tbt_data_mask_samples_end_int <= "0000000000000000";
      pos_calc_tbt_data_mask_samples_end_swb <= '0';
      pos_calc_tbt_data_mask_samples_end_swb_delay <= '0';
    elsif rising_edge(clk_sys_i) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          regs_o.dsp_monit_updt_wr_o <= '0';
          regs_o.dsp_monit1_updt_wr_o <= '0';
          ack_in_progress <= '0';
        else
          pos_calc_ds_tbt_thres_val_swb <= pos_calc_ds_tbt_thres_val_swb_delay;
          pos_calc_ds_tbt_thres_val_swb_delay <= '0';
          pos_calc_ds_fofb_thres_val_swb <= pos_calc_ds_fofb_thres_val_swb_delay;
          pos_calc_ds_fofb_thres_val_swb_delay <= '0';
          pos_calc_ds_monit_thres_val_swb <= pos_calc_ds_monit_thres_val_swb_delay;
          pos_calc_ds_monit_thres_val_swb_delay <= '0';
          pos_calc_kx_val_swb <= pos_calc_kx_val_swb_delay;
          pos_calc_kx_val_swb_delay <= '0';
          pos_calc_ky_val_swb <= pos_calc_ky_val_swb_delay;
          pos_calc_ky_val_swb_delay <= '0';
          pos_calc_ksum_val_swb <= pos_calc_ksum_val_swb_delay;
          pos_calc_ksum_val_swb_delay <= '0';
          pos_calc_dsp_ctnr_tbt_ch01_lwb <= pos_calc_dsp_ctnr_tbt_ch01_lwb_delay;
          pos_calc_dsp_ctnr_tbt_ch01_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr_tbt_ch01_lwb_in_progress = '1')) then
            rddata_reg(15 downto 0) <= pos_calc_dsp_ctnr_tbt_ch01_int;
            pos_calc_dsp_ctnr_tbt_ch01_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr_tbt_ch23_lwb <= pos_calc_dsp_ctnr_tbt_ch23_lwb_delay;
          pos_calc_dsp_ctnr_tbt_ch23_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr_tbt_ch23_lwb_in_progress = '1')) then
            rddata_reg(31 downto 16) <= pos_calc_dsp_ctnr_tbt_ch23_int;
            pos_calc_dsp_ctnr_tbt_ch23_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr_fofb_ch01_lwb <= pos_calc_dsp_ctnr_fofb_ch01_lwb_delay;
          pos_calc_dsp_ctnr_fofb_ch01_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr_fofb_ch01_lwb_in_progress = '1')) then
            rddata_reg(15 downto 0) <= pos_calc_dsp_ctnr_fofb_ch01_int;
            pos_calc_dsp_ctnr_fofb_ch01_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr_fofb_ch23_lwb <= pos_calc_dsp_ctnr_fofb_ch23_lwb_delay;
          pos_calc_dsp_ctnr_fofb_ch23_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr_fofb_ch23_lwb_in_progress = '1')) then
            rddata_reg(31 downto 16) <= pos_calc_dsp_ctnr_fofb_ch23_int;
            pos_calc_dsp_ctnr_fofb_ch23_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr1_monit_cic_lwb <= pos_calc_dsp_ctnr1_monit_cic_lwb_delay;
          pos_calc_dsp_ctnr1_monit_cic_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr1_monit_cic_lwb_in_progress = '1')) then
            rddata_reg(15 downto 0) <= pos_calc_dsp_ctnr1_monit_cic_int;
            pos_calc_dsp_ctnr1_monit_cic_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr1_monit_cfir_lwb <= pos_calc_dsp_ctnr1_monit_cfir_lwb_delay;
          pos_calc_dsp_ctnr1_monit_cfir_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr1_monit_cfir_lwb_in_progress = '1')) then
            rddata_reg(31 downto 16) <= pos_calc_dsp_ctnr1_monit_cfir_int;
            pos_calc_dsp_ctnr1_monit_cfir_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr2_monit_pfir_lwb <= pos_calc_dsp_ctnr2_monit_pfir_lwb_delay;
          pos_calc_dsp_ctnr2_monit_pfir_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr2_monit_pfir_lwb_in_progress = '1')) then
            rddata_reg(15 downto 0) <= pos_calc_dsp_ctnr2_monit_pfir_int;
            pos_calc_dsp_ctnr2_monit_pfir_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr2_monit_fir_01_lwb <= pos_calc_dsp_ctnr2_monit_fir_01_lwb_delay;
          pos_calc_dsp_ctnr2_monit_fir_01_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr2_monit_fir_01_lwb_in_progress = '1')) then
            rddata_reg(31 downto 16) <= pos_calc_dsp_ctnr2_monit_fir_01_int;
            pos_calc_dsp_ctnr2_monit_fir_01_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_err_clr_tbt_int <= pos_calc_dsp_err_clr_tbt_int_delay;
          pos_calc_dsp_err_clr_tbt_int_delay <= '0';
          pos_calc_dsp_err_clr_fofb_int <= pos_calc_dsp_err_clr_fofb_int_delay;
          pos_calc_dsp_err_clr_fofb_int_delay <= '0';
          pos_calc_dsp_err_clr_monit_part1_int <= pos_calc_dsp_err_clr_monit_part1_int_delay;
          pos_calc_dsp_err_clr_monit_part1_int_delay <= '0';
          pos_calc_dsp_err_clr_monit_part2_int <= pos_calc_dsp_err_clr_monit_part2_int_delay;
          pos_calc_dsp_err_clr_monit_part2_int_delay <= '0';
          pos_calc_dds_cfg_valid_ch0_int <= pos_calc_dds_cfg_valid_ch0_int_delay;
          pos_calc_dds_cfg_valid_ch0_int_delay <= '0';
          pos_calc_dds_cfg_valid_ch1_int <= pos_calc_dds_cfg_valid_ch1_int_delay;
          pos_calc_dds_cfg_valid_ch1_int_delay <= '0';
          pos_calc_dds_cfg_valid_ch2_int <= pos_calc_dds_cfg_valid_ch2_int_delay;
          pos_calc_dds_cfg_valid_ch2_int_delay <= '0';
          pos_calc_dds_cfg_valid_ch3_int <= pos_calc_dds_cfg_valid_ch3_int_delay;
          pos_calc_dds_cfg_valid_ch3_int_delay <= '0';
          pos_calc_dds_pinc_ch0_val_swb <= pos_calc_dds_pinc_ch0_val_swb_delay;
          pos_calc_dds_pinc_ch0_val_swb_delay <= '0';
          pos_calc_dds_pinc_ch1_val_swb <= pos_calc_dds_pinc_ch1_val_swb_delay;
          pos_calc_dds_pinc_ch1_val_swb_delay <= '0';
          pos_calc_dds_pinc_ch2_val_swb <= pos_calc_dds_pinc_ch2_val_swb_delay;
          pos_calc_dds_pinc_ch2_val_swb_delay <= '0';
          pos_calc_dds_pinc_ch3_val_swb <= pos_calc_dds_pinc_ch3_val_swb_delay;
          pos_calc_dds_pinc_ch3_val_swb_delay <= '0';
          pos_calc_dds_poff_ch0_val_swb <= pos_calc_dds_poff_ch0_val_swb_delay;
          pos_calc_dds_poff_ch0_val_swb_delay <= '0';
          pos_calc_dds_poff_ch1_val_swb <= pos_calc_dds_poff_ch1_val_swb_delay;
          pos_calc_dds_poff_ch1_val_swb_delay <= '0';
          pos_calc_dds_poff_ch2_val_swb <= pos_calc_dds_poff_ch2_val_swb_delay;
          pos_calc_dds_poff_ch2_val_swb_delay <= '0';
          pos_calc_dds_poff_ch3_val_swb <= pos_calc_dds_poff_ch3_val_swb_delay;
          pos_calc_dds_poff_ch3_val_swb_delay <= '0';
          regs_o.dsp_monit_updt_wr_o <= '0';
          regs_o.dsp_monit1_updt_wr_o <= '0';
          pos_calc_sw_tag_desync_cnt_rst_int <= pos_calc_sw_tag_desync_cnt_rst_int_delay;
          pos_calc_sw_tag_desync_cnt_rst_int_delay <= '0';
          pos_calc_sw_tag_desync_cnt_lwb <= pos_calc_sw_tag_desync_cnt_lwb_delay;
          pos_calc_sw_tag_desync_cnt_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_sw_tag_desync_cnt_lwb_in_progress = '1')) then
            rddata_reg(22 downto 9) <= pos_calc_sw_tag_desync_cnt_int;
            pos_calc_sw_tag_desync_cnt_lwb_in_progress <= '0';
          end if;
          pos_calc_sw_data_mask_samples_swb <= pos_calc_sw_data_mask_samples_swb_delay;
          pos_calc_sw_data_mask_samples_swb_delay <= '0';
          pos_calc_tbt_tag_dly_swb <= pos_calc_tbt_tag_dly_swb_delay;
          pos_calc_tbt_tag_dly_swb_delay <= '0';
          pos_calc_tbt_tag_desync_cnt_rst_int <= pos_calc_tbt_tag_desync_cnt_rst_int_delay;
          pos_calc_tbt_tag_desync_cnt_rst_int_delay <= '0';
          pos_calc_tbt_tag_desync_cnt_lwb <= pos_calc_tbt_tag_desync_cnt_lwb_delay;
          pos_calc_tbt_tag_desync_cnt_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_tbt_tag_desync_cnt_lwb_in_progress = '1')) then
            rddata_reg(31 downto 18) <= pos_calc_tbt_tag_desync_cnt_int;
            pos_calc_tbt_tag_desync_cnt_lwb_in_progress <= '0';
          end if;
          pos_calc_tbt_data_mask_samples_beg_swb <= pos_calc_tbt_data_mask_samples_beg_swb_delay;
          pos_calc_tbt_data_mask_samples_beg_swb_delay <= '0';
          pos_calc_tbt_data_mask_samples_end_swb <= pos_calc_tbt_data_mask_samples_end_swb_delay;
          pos_calc_tbt_data_mask_samples_end_swb_delay <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(5 downto 0) is
          when "000000" =>
            if (wb_we_i = '1') then
              pos_calc_ds_tbt_thres_val_int <= wrdata_reg(25 downto 0);
              pos_calc_ds_tbt_thres_val_swb <= '1';
              pos_calc_ds_tbt_thres_val_swb_delay <= '1';
            end if;
            rddata_reg(25 downto 0) <= pos_calc_ds_tbt_thres_val_int;
            rddata_reg(31 downto 26) <= regs_i.ds_tbt_thres_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "000001" =>
            if (wb_we_i = '1') then
              pos_calc_ds_fofb_thres_val_int <= wrdata_reg(25 downto 0);
              pos_calc_ds_fofb_thres_val_swb <= '1';
              pos_calc_ds_fofb_thres_val_swb_delay <= '1';
            end if;
            rddata_reg(25 downto 0) <= pos_calc_ds_fofb_thres_val_int;
            rddata_reg(31 downto 26) <= regs_i.ds_fofb_thres_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "000010" =>
            if (wb_we_i = '1') then
              pos_calc_ds_monit_thres_val_int <= wrdata_reg(25 downto 0);
              pos_calc_ds_monit_thres_val_swb <= '1';
              pos_calc_ds_monit_thres_val_swb_delay <= '1';
            end if;
            rddata_reg(25 downto 0) <= pos_calc_ds_monit_thres_val_int;
            rddata_reg(31 downto 26) <= regs_i.ds_monit_thres_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "000011" =>
            if (wb_we_i = '1') then
              pos_calc_kx_val_int <= wrdata_reg(24 downto 0);
              pos_calc_kx_val_swb <= '1';
              pos_calc_kx_val_swb_delay <= '1';
            end if;
            rddata_reg(24 downto 0) <= pos_calc_kx_val_int;
            rddata_reg(31 downto 25) <= regs_i.kx_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "000100" =>
            if (wb_we_i = '1') then
              pos_calc_ky_val_int <= wrdata_reg(24 downto 0);
              pos_calc_ky_val_swb <= '1';
              pos_calc_ky_val_swb_delay <= '1';
            end if;
            rddata_reg(24 downto 0) <= pos_calc_ky_val_int;
            rddata_reg(31 downto 25) <= regs_i.ky_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "000101" =>
            if (wb_we_i = '1') then
              pos_calc_ksum_val_int <= wrdata_reg(24 downto 0);
              pos_calc_ksum_val_swb <= '1';
              pos_calc_ksum_val_swb_delay <= '1';
            end if;
            rddata_reg(24 downto 0) <= pos_calc_ksum_val_int;
            rddata_reg(31 downto 25) <= regs_i.ksum_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "000110" =>
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr_tbt_ch01_lwb <= '1';
              pos_calc_dsp_ctnr_tbt_ch01_lwb_delay <= '1';
              pos_calc_dsp_ctnr_tbt_ch01_lwb_in_progress <= '1';
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr_tbt_ch23_lwb <= '1';
              pos_calc_dsp_ctnr_tbt_ch23_lwb_delay <= '1';
              pos_calc_dsp_ctnr_tbt_ch23_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "000111" =>
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr_fofb_ch01_lwb <= '1';
              pos_calc_dsp_ctnr_fofb_ch01_lwb_delay <= '1';
              pos_calc_dsp_ctnr_fofb_ch01_lwb_in_progress <= '1';
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr_fofb_ch23_lwb <= '1';
              pos_calc_dsp_ctnr_fofb_ch23_lwb_delay <= '1';
              pos_calc_dsp_ctnr_fofb_ch23_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "001000" =>
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr1_monit_cic_lwb <= '1';
              pos_calc_dsp_ctnr1_monit_cic_lwb_delay <= '1';
              pos_calc_dsp_ctnr1_monit_cic_lwb_in_progress <= '1';
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr1_monit_cfir_lwb <= '1';
              pos_calc_dsp_ctnr1_monit_cfir_lwb_delay <= '1';
              pos_calc_dsp_ctnr1_monit_cfir_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "001001" =>
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr2_monit_pfir_lwb <= '1';
              pos_calc_dsp_ctnr2_monit_pfir_lwb_delay <= '1';
              pos_calc_dsp_ctnr2_monit_pfir_lwb_in_progress <= '1';
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr2_monit_fir_01_lwb <= '1';
              pos_calc_dsp_ctnr2_monit_fir_01_lwb_delay <= '1';
              pos_calc_dsp_ctnr2_monit_fir_01_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "001010" =>
            if (wb_we_i = '1') then
              pos_calc_dsp_err_clr_tbt_int <= wrdata_reg(0);
              pos_calc_dsp_err_clr_tbt_int_delay <= wrdata_reg(0);
              pos_calc_dsp_err_clr_fofb_int <= wrdata_reg(1);
              pos_calc_dsp_err_clr_fofb_int_delay <= wrdata_reg(1);
              pos_calc_dsp_err_clr_monit_part1_int <= wrdata_reg(2);
              pos_calc_dsp_err_clr_monit_part1_int_delay <= wrdata_reg(2);
              pos_calc_dsp_err_clr_monit_part2_int <= wrdata_reg(3);
              pos_calc_dsp_err_clr_monit_part2_int_delay <= wrdata_reg(3);
            end if;
            rddata_reg(0) <= '0';
            rddata_reg(1) <= '0';
            rddata_reg(2) <= '0';
            rddata_reg(3) <= '0';
            rddata_reg(0) <= 'X';
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "001011" =>
            if (wb_we_i = '1') then
              pos_calc_dds_cfg_valid_ch0_int <= wrdata_reg(0);
              pos_calc_dds_cfg_valid_ch0_int_delay <= wrdata_reg(0);
              pos_calc_dds_cfg_test_data_int <= wrdata_reg(1);
              pos_calc_dds_cfg_valid_ch1_int <= wrdata_reg(8);
              pos_calc_dds_cfg_valid_ch1_int_delay <= wrdata_reg(8);
              pos_calc_dds_cfg_valid_ch2_int <= wrdata_reg(16);
              pos_calc_dds_cfg_valid_ch2_int_delay <= wrdata_reg(16);
              pos_calc_dds_cfg_valid_ch3_int <= wrdata_reg(24);
              pos_calc_dds_cfg_valid_ch3_int_delay <= wrdata_reg(24);
            end if;
            rddata_reg(0) <= '0';
            rddata_reg(1) <= pos_calc_dds_cfg_test_data_int;
            rddata_reg(7 downto 2) <= regs_i.dds_cfg_reserved_ch0_i;
            rddata_reg(8) <= '0';
            rddata_reg(15 downto 9) <= regs_i.dds_cfg_reserved_ch1_i;
            rddata_reg(16) <= '0';
            rddata_reg(23 downto 17) <= regs_i.dds_cfg_reserved_ch2_i;
            rddata_reg(24) <= '0';
            rddata_reg(31 downto 25) <= regs_i.dds_cfg_reserved_ch3_i;
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "001100" =>
            if (wb_we_i = '1') then
              pos_calc_dds_pinc_ch0_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_pinc_ch0_val_swb <= '1';
              pos_calc_dds_pinc_ch0_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_pinc_ch0_val_int;
            rddata_reg(31 downto 30) <= regs_i.dds_pinc_ch0_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "001101" =>
            if (wb_we_i = '1') then
              pos_calc_dds_pinc_ch1_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_pinc_ch1_val_swb <= '1';
              pos_calc_dds_pinc_ch1_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_pinc_ch1_val_int;
            rddata_reg(31 downto 30) <= regs_i.dds_pinc_ch1_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "001110" =>
            if (wb_we_i = '1') then
              pos_calc_dds_pinc_ch2_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_pinc_ch2_val_swb <= '1';
              pos_calc_dds_pinc_ch2_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_pinc_ch2_val_int;
            rddata_reg(31 downto 30) <= regs_i.dds_pinc_ch2_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "001111" =>
            if (wb_we_i = '1') then
              pos_calc_dds_pinc_ch3_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_pinc_ch3_val_swb <= '1';
              pos_calc_dds_pinc_ch3_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_pinc_ch3_val_int;
            rddata_reg(31 downto 30) <= regs_i.dds_pinc_ch3_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "010000" =>
            if (wb_we_i = '1') then
              pos_calc_dds_poff_ch0_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_poff_ch0_val_swb <= '1';
              pos_calc_dds_poff_ch0_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_poff_ch0_val_int;
            rddata_reg(31 downto 30) <= regs_i.dds_poff_ch0_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "010001" =>
            if (wb_we_i = '1') then
              pos_calc_dds_poff_ch1_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_poff_ch1_val_swb <= '1';
              pos_calc_dds_poff_ch1_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_poff_ch1_val_int;
            rddata_reg(31 downto 30) <= regs_i.dds_poff_ch1_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "010010" =>
            if (wb_we_i = '1') then
              pos_calc_dds_poff_ch2_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_poff_ch2_val_swb <= '1';
              pos_calc_dds_poff_ch2_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_poff_ch2_val_int;
            rddata_reg(31 downto 30) <= regs_i.dds_poff_ch2_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "010011" =>
            if (wb_we_i = '1') then
              pos_calc_dds_poff_ch3_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_poff_ch3_val_swb <= '1';
              pos_calc_dds_poff_ch3_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_poff_ch3_val_int;
            rddata_reg(31 downto 30) <= regs_i.dds_poff_ch3_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "010100" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= regs_i.dsp_monit_amp_ch0_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "010101" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= regs_i.dsp_monit_amp_ch1_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "010110" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= regs_i.dsp_monit_amp_ch2_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "010111" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= regs_i.dsp_monit_amp_ch3_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011000" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= regs_i.dsp_monit_pos_x_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011001" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= regs_i.dsp_monit_pos_y_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011010" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= regs_i.dsp_monit_pos_q_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011011" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= regs_i.dsp_monit_pos_sum_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011100" =>
            if (wb_we_i = '1') then
              regs_o.dsp_monit_updt_wr_o <= '1';
            end if;
            rddata_reg(0) <= 'X';
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011101" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= regs_i.dsp_monit1_amp_ch0_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011110" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= regs_i.dsp_monit1_amp_ch1_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011111" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= regs_i.dsp_monit1_amp_ch2_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100000" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= regs_i.dsp_monit1_amp_ch3_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100001" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= regs_i.dsp_monit1_pos_x_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100010" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= regs_i.dsp_monit1_pos_y_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100011" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= regs_i.dsp_monit1_pos_q_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100100" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= regs_i.dsp_monit1_pos_sum_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100101" =>
            if (wb_we_i = '1') then
              regs_o.dsp_monit1_updt_wr_o <= '1';
            end if;
            rddata_reg(0) <= 'X';
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100110" =>
            if (wb_we_i = '1') then
            end if;
            if (pos_calc_ampfifo_monit_rdreq_int_d0 = '0') then
              pos_calc_ampfifo_monit_rdreq_int <= not pos_calc_ampfifo_monit_rdreq_int;
            else
              rddata_reg(31 downto 0) <= pos_calc_ampfifo_monit_out_int(31 downto 0);
              ack_in_progress <= '1';
              ack_sreg(0) <= '1';
            end if;
          when "100111" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_ampfifo_monit_out_int(63 downto 32);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "101000" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_ampfifo_monit_out_int(95 downto 64);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "101001" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_ampfifo_monit_out_int(127 downto 96);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "101010" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(16) <= pos_calc_ampfifo_monit_full_int;
            rddata_reg(17) <= pos_calc_ampfifo_monit_empty_int;
            rddata_reg(3 downto 0) <= pos_calc_ampfifo_monit_usedw_int;
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "101011" =>
            if (wb_we_i = '1') then
            end if;
            if (pos_calc_posfifo_monit_rdreq_int_d0 = '0') then
              pos_calc_posfifo_monit_rdreq_int <= not pos_calc_posfifo_monit_rdreq_int;
            else
              rddata_reg(31 downto 0) <= pos_calc_posfifo_monit_out_int(31 downto 0);
              ack_in_progress <= '1';
              ack_sreg(0) <= '1';
            end if;
          when "101100" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_posfifo_monit_out_int(63 downto 32);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "101101" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_posfifo_monit_out_int(95 downto 64);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "101110" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_posfifo_monit_out_int(127 downto 96);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "101111" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(16) <= pos_calc_posfifo_monit_full_int;
            rddata_reg(17) <= pos_calc_posfifo_monit_empty_int;
            rddata_reg(3 downto 0) <= pos_calc_posfifo_monit_usedw_int;
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "110000" =>
            if (wb_we_i = '1') then
            end if;
            if (pos_calc_ampfifo_monit1_rdreq_int_d0 = '0') then
              pos_calc_ampfifo_monit1_rdreq_int <= not pos_calc_ampfifo_monit1_rdreq_int;
            else
              rddata_reg(31 downto 0) <= pos_calc_ampfifo_monit1_out_int(31 downto 0);
              ack_in_progress <= '1';
              ack_sreg(0) <= '1';
            end if;
          when "110001" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_ampfifo_monit1_out_int(63 downto 32);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "110010" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_ampfifo_monit1_out_int(95 downto 64);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "110011" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_ampfifo_monit1_out_int(127 downto 96);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "110100" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(16) <= pos_calc_ampfifo_monit1_full_int;
            rddata_reg(17) <= pos_calc_ampfifo_monit1_empty_int;
            rddata_reg(3 downto 0) <= pos_calc_ampfifo_monit1_usedw_int;
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "110101" =>
            if (wb_we_i = '1') then
            end if;
            if (pos_calc_posfifo_monit1_rdreq_int_d0 = '0') then
              pos_calc_posfifo_monit1_rdreq_int <= not pos_calc_posfifo_monit1_rdreq_int;
            else
              rddata_reg(31 downto 0) <= pos_calc_posfifo_monit1_out_int(31 downto 0);
              ack_in_progress <= '1';
              ack_sreg(0) <= '1';
            end if;
          when "110110" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_posfifo_monit1_out_int(63 downto 32);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "110111" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_posfifo_monit1_out_int(95 downto 64);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "111000" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= pos_calc_posfifo_monit1_out_int(127 downto 96);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "111001" =>
            if (wb_we_i = '1') then
            end if;
            rddata_reg(16) <= pos_calc_posfifo_monit1_full_int;
            rddata_reg(17) <= pos_calc_posfifo_monit1_empty_int;
            rddata_reg(3 downto 0) <= pos_calc_posfifo_monit1_usedw_int;
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "111010" =>
            if (wb_we_i = '1') then
              pos_calc_sw_tag_en_int <= wrdata_reg(0);
              pos_calc_sw_tag_desync_cnt_rst_int <= wrdata_reg(8);
              pos_calc_sw_tag_desync_cnt_rst_int_delay <= wrdata_reg(8);
            end if;
            rddata_reg(0) <= pos_calc_sw_tag_en_int;
            rddata_reg(8) <= '0';
            if (wb_we_i = '0') then
              pos_calc_sw_tag_desync_cnt_lwb <= '1';
              pos_calc_sw_tag_desync_cnt_lwb_delay <= '1';
              pos_calc_sw_tag_desync_cnt_lwb_in_progress <= '1';
            end if;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "111011" =>
            if (wb_we_i = '1') then
              pos_calc_sw_data_mask_en_int <= wrdata_reg(0);
              pos_calc_sw_data_mask_samples_int <= wrdata_reg(16 downto 1);
              pos_calc_sw_data_mask_samples_swb <= '1';
              pos_calc_sw_data_mask_samples_swb_delay <= '1';
            end if;
            rddata_reg(0) <= pos_calc_sw_data_mask_en_int;
            rddata_reg(16 downto 1) <= pos_calc_sw_data_mask_samples_int;
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "111100" =>
            if (wb_we_i = '1') then
              pos_calc_tbt_tag_en_int <= wrdata_reg(0);
              pos_calc_tbt_tag_dly_int <= wrdata_reg(16 downto 1);
              pos_calc_tbt_tag_dly_swb <= '1';
              pos_calc_tbt_tag_dly_swb_delay <= '1';
              pos_calc_tbt_tag_desync_cnt_rst_int <= wrdata_reg(17);
              pos_calc_tbt_tag_desync_cnt_rst_int_delay <= wrdata_reg(17);
            end if;
            rddata_reg(0) <= pos_calc_tbt_tag_en_int;
            rddata_reg(16 downto 1) <= pos_calc_tbt_tag_dly_int;
            rddata_reg(17) <= '0';
            if (wb_we_i = '0') then
              pos_calc_tbt_tag_desync_cnt_lwb <= '1';
              pos_calc_tbt_tag_desync_cnt_lwb_delay <= '1';
              pos_calc_tbt_tag_desync_cnt_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "111101" =>
            if (wb_we_i = '1') then
              pos_calc_tbt_data_mask_ctl_en_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= pos_calc_tbt_data_mask_ctl_en_int;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "111110" =>
            if (wb_we_i = '1') then
              pos_calc_tbt_data_mask_samples_beg_int <= wrdata_reg(15 downto 0);
              pos_calc_tbt_data_mask_samples_beg_swb <= '1';
              pos_calc_tbt_data_mask_samples_beg_swb_delay <= '1';
              pos_calc_tbt_data_mask_samples_end_int <= wrdata_reg(31 downto 16);
              pos_calc_tbt_data_mask_samples_end_swb <= '1';
              pos_calc_tbt_data_mask_samples_end_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= pos_calc_tbt_data_mask_samples_beg_int;
            rddata_reg(31 downto 16) <= pos_calc_tbt_data_mask_samples_end_int;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;


-- Drive the data output bus
  wb_dat_o <= rddata_reg;
-- Config divisor threshold TBT
-- asynchronous std_logic_vector register : Config divisor threshold TBT (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_ds_tbt_thres_val_swb_s0 <= '0';
      pos_calc_ds_tbt_thres_val_swb_s1 <= '0';
      pos_calc_ds_tbt_thres_val_swb_s2 <= '0';
      regs_o.ds_tbt_thres_val_o <= "00000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_ds_tbt_thres_val_swb_s0 <= pos_calc_ds_tbt_thres_val_swb;
      pos_calc_ds_tbt_thres_val_swb_s1 <= pos_calc_ds_tbt_thres_val_swb_s0;
      pos_calc_ds_tbt_thres_val_swb_s2 <= pos_calc_ds_tbt_thres_val_swb_s1;
      if ((pos_calc_ds_tbt_thres_val_swb_s2 = '0') and (pos_calc_ds_tbt_thres_val_swb_s1 = '1')) then
        regs_o.ds_tbt_thres_val_o <= pos_calc_ds_tbt_thres_val_int;
      end if;
    end if;
  end process;


-- Reserved
-- Config divisor threshold FOFB
-- asynchronous std_logic_vector register : Config divisor threshold FOFB (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_ds_fofb_thres_val_swb_s0 <= '0';
      pos_calc_ds_fofb_thres_val_swb_s1 <= '0';
      pos_calc_ds_fofb_thres_val_swb_s2 <= '0';
      regs_o.ds_fofb_thres_val_o <= "00000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_ds_fofb_thres_val_swb_s0 <= pos_calc_ds_fofb_thres_val_swb;
      pos_calc_ds_fofb_thres_val_swb_s1 <= pos_calc_ds_fofb_thres_val_swb_s0;
      pos_calc_ds_fofb_thres_val_swb_s2 <= pos_calc_ds_fofb_thres_val_swb_s1;
      if ((pos_calc_ds_fofb_thres_val_swb_s2 = '0') and (pos_calc_ds_fofb_thres_val_swb_s1 = '1')) then
        regs_o.ds_fofb_thres_val_o <= pos_calc_ds_fofb_thres_val_int;
      end if;
    end if;
  end process;


-- Reserved
-- Config Divisor Threshold Monit.
-- asynchronous std_logic_vector register : Config Divisor Threshold Monit. (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_ds_monit_thres_val_swb_s0 <= '0';
      pos_calc_ds_monit_thres_val_swb_s1 <= '0';
      pos_calc_ds_monit_thres_val_swb_s2 <= '0';
      regs_o.ds_monit_thres_val_o <= "00000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_ds_monit_thres_val_swb_s0 <= pos_calc_ds_monit_thres_val_swb;
      pos_calc_ds_monit_thres_val_swb_s1 <= pos_calc_ds_monit_thres_val_swb_s0;
      pos_calc_ds_monit_thres_val_swb_s2 <= pos_calc_ds_monit_thres_val_swb_s1;
      if ((pos_calc_ds_monit_thres_val_swb_s2 = '0') and (pos_calc_ds_monit_thres_val_swb_s1 = '1')) then
        regs_o.ds_monit_thres_val_o <= pos_calc_ds_monit_thres_val_int;
      end if;
    end if;
  end process;


-- Reserved
-- BPM sensitivity (X axis) parameter register
-- asynchronous std_logic_vector register : BPM sensitivity (X axis) parameter register (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_kx_val_swb_s0 <= '0';
      pos_calc_kx_val_swb_s1 <= '0';
      pos_calc_kx_val_swb_s2 <= '0';
      regs_o.kx_val_o <= "0000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_kx_val_swb_s0 <= pos_calc_kx_val_swb;
      pos_calc_kx_val_swb_s1 <= pos_calc_kx_val_swb_s0;
      pos_calc_kx_val_swb_s2 <= pos_calc_kx_val_swb_s1;
      if ((pos_calc_kx_val_swb_s2 = '0') and (pos_calc_kx_val_swb_s1 = '1')) then
        regs_o.kx_val_o <= pos_calc_kx_val_int;
      end if;
    end if;
  end process;


-- Reserved
-- BPM sensitivity (Y axis) parameter register
-- asynchronous std_logic_vector register : BPM sensitivity (Y axis) parameter register (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_ky_val_swb_s0 <= '0';
      pos_calc_ky_val_swb_s1 <= '0';
      pos_calc_ky_val_swb_s2 <= '0';
      regs_o.ky_val_o <= "0000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_ky_val_swb_s0 <= pos_calc_ky_val_swb;
      pos_calc_ky_val_swb_s1 <= pos_calc_ky_val_swb_s0;
      pos_calc_ky_val_swb_s2 <= pos_calc_ky_val_swb_s1;
      if ((pos_calc_ky_val_swb_s2 = '0') and (pos_calc_ky_val_swb_s1 = '1')) then
        regs_o.ky_val_o <= pos_calc_ky_val_int;
      end if;
    end if;
  end process;


-- Reserved
-- BPM sensitivity (Sum) parameter register
-- asynchronous std_logic_vector register : BPM sensitivity (Sum) parameter register (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_ksum_val_swb_s0 <= '0';
      pos_calc_ksum_val_swb_s1 <= '0';
      pos_calc_ksum_val_swb_s2 <= '0';
      regs_o.ksum_val_o <= "0000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_ksum_val_swb_s0 <= pos_calc_ksum_val_swb;
      pos_calc_ksum_val_swb_s1 <= pos_calc_ksum_val_swb_s0;
      pos_calc_ksum_val_swb_s2 <= pos_calc_ksum_val_swb_s1;
      if ((pos_calc_ksum_val_swb_s2 = '0') and (pos_calc_ksum_val_swb_s1 = '1')) then
        regs_o.ksum_val_o <= pos_calc_ksum_val_int;
      end if;
    end if;
  end process;


-- Reserved
-- TBT incorrect counter for channels 0/1 (multiplexed)
-- asynchronous std_logic_vector register : TBT incorrect counter for channels 0/1 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_ctnr_tbt_ch01_lwb_s0 <= '0';
      pos_calc_dsp_ctnr_tbt_ch01_lwb_s1 <= '0';
      pos_calc_dsp_ctnr_tbt_ch01_lwb_s2 <= '0';
      pos_calc_dsp_ctnr_tbt_ch01_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr_tbt_ch01_lwb_s0 <= pos_calc_dsp_ctnr_tbt_ch01_lwb;
      pos_calc_dsp_ctnr_tbt_ch01_lwb_s1 <= pos_calc_dsp_ctnr_tbt_ch01_lwb_s0;
      pos_calc_dsp_ctnr_tbt_ch01_lwb_s2 <= pos_calc_dsp_ctnr_tbt_ch01_lwb_s1;
      if ((pos_calc_dsp_ctnr_tbt_ch01_lwb_s1 = '1') and (pos_calc_dsp_ctnr_tbt_ch01_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr_tbt_ch01_int <= regs_i.dsp_ctnr_tbt_ch01_i;
      end if;
    end if;
  end process;


-- TBT incorrect counter for channels 2/3 (multiplexed)
-- asynchronous std_logic_vector register : TBT incorrect counter for channels 2/3 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_ctnr_tbt_ch23_lwb_s0 <= '0';
      pos_calc_dsp_ctnr_tbt_ch23_lwb_s1 <= '0';
      pos_calc_dsp_ctnr_tbt_ch23_lwb_s2 <= '0';
      pos_calc_dsp_ctnr_tbt_ch23_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr_tbt_ch23_lwb_s0 <= pos_calc_dsp_ctnr_tbt_ch23_lwb;
      pos_calc_dsp_ctnr_tbt_ch23_lwb_s1 <= pos_calc_dsp_ctnr_tbt_ch23_lwb_s0;
      pos_calc_dsp_ctnr_tbt_ch23_lwb_s2 <= pos_calc_dsp_ctnr_tbt_ch23_lwb_s1;
      if ((pos_calc_dsp_ctnr_tbt_ch23_lwb_s1 = '1') and (pos_calc_dsp_ctnr_tbt_ch23_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr_tbt_ch23_int <= regs_i.dsp_ctnr_tbt_ch23_i;
      end if;
    end if;
  end process;


-- FOFB incorrect counter for channels 0/1 (multiplexed)
-- asynchronous std_logic_vector register : FOFB incorrect counter for channels 0/1 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_ctnr_fofb_ch01_lwb_s0 <= '0';
      pos_calc_dsp_ctnr_fofb_ch01_lwb_s1 <= '0';
      pos_calc_dsp_ctnr_fofb_ch01_lwb_s2 <= '0';
      pos_calc_dsp_ctnr_fofb_ch01_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr_fofb_ch01_lwb_s0 <= pos_calc_dsp_ctnr_fofb_ch01_lwb;
      pos_calc_dsp_ctnr_fofb_ch01_lwb_s1 <= pos_calc_dsp_ctnr_fofb_ch01_lwb_s0;
      pos_calc_dsp_ctnr_fofb_ch01_lwb_s2 <= pos_calc_dsp_ctnr_fofb_ch01_lwb_s1;
      if ((pos_calc_dsp_ctnr_fofb_ch01_lwb_s1 = '1') and (pos_calc_dsp_ctnr_fofb_ch01_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr_fofb_ch01_int <= regs_i.dsp_ctnr_fofb_ch01_i;
      end if;
    end if;
  end process;


-- FOFB incorrect counter for channels 2/3 (multiplexed)
-- asynchronous std_logic_vector register : FOFB incorrect counter for channels 2/3 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_ctnr_fofb_ch23_lwb_s0 <= '0';
      pos_calc_dsp_ctnr_fofb_ch23_lwb_s1 <= '0';
      pos_calc_dsp_ctnr_fofb_ch23_lwb_s2 <= '0';
      pos_calc_dsp_ctnr_fofb_ch23_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr_fofb_ch23_lwb_s0 <= pos_calc_dsp_ctnr_fofb_ch23_lwb;
      pos_calc_dsp_ctnr_fofb_ch23_lwb_s1 <= pos_calc_dsp_ctnr_fofb_ch23_lwb_s0;
      pos_calc_dsp_ctnr_fofb_ch23_lwb_s2 <= pos_calc_dsp_ctnr_fofb_ch23_lwb_s1;
      if ((pos_calc_dsp_ctnr_fofb_ch23_lwb_s1 = '1') and (pos_calc_dsp_ctnr_fofb_ch23_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr_fofb_ch23_int <= regs_i.dsp_ctnr_fofb_ch23_i;
      end if;
    end if;
  end process;


-- Monit. CIC incorrect counter for channels 0/1/2/3 (multiplexed)
-- asynchronous std_logic_vector register : Monit. CIC incorrect counter for channels 0/1/2/3 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_ctnr1_monit_cic_lwb_s0 <= '0';
      pos_calc_dsp_ctnr1_monit_cic_lwb_s1 <= '0';
      pos_calc_dsp_ctnr1_monit_cic_lwb_s2 <= '0';
      pos_calc_dsp_ctnr1_monit_cic_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr1_monit_cic_lwb_s0 <= pos_calc_dsp_ctnr1_monit_cic_lwb;
      pos_calc_dsp_ctnr1_monit_cic_lwb_s1 <= pos_calc_dsp_ctnr1_monit_cic_lwb_s0;
      pos_calc_dsp_ctnr1_monit_cic_lwb_s2 <= pos_calc_dsp_ctnr1_monit_cic_lwb_s1;
      if ((pos_calc_dsp_ctnr1_monit_cic_lwb_s1 = '1') and (pos_calc_dsp_ctnr1_monit_cic_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr1_monit_cic_int <= regs_i.dsp_ctnr1_monit_cic_i;
      end if;
    end if;
  end process;


-- Monit. CFIR incorrect counter for channels 0/1/2/3 (multiplexed)
-- asynchronous std_logic_vector register : Monit. CFIR incorrect counter for channels 0/1/2/3 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_ctnr1_monit_cfir_lwb_s0 <= '0';
      pos_calc_dsp_ctnr1_monit_cfir_lwb_s1 <= '0';
      pos_calc_dsp_ctnr1_monit_cfir_lwb_s2 <= '0';
      pos_calc_dsp_ctnr1_monit_cfir_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr1_monit_cfir_lwb_s0 <= pos_calc_dsp_ctnr1_monit_cfir_lwb;
      pos_calc_dsp_ctnr1_monit_cfir_lwb_s1 <= pos_calc_dsp_ctnr1_monit_cfir_lwb_s0;
      pos_calc_dsp_ctnr1_monit_cfir_lwb_s2 <= pos_calc_dsp_ctnr1_monit_cfir_lwb_s1;
      if ((pos_calc_dsp_ctnr1_monit_cfir_lwb_s1 = '1') and (pos_calc_dsp_ctnr1_monit_cfir_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr1_monit_cfir_int <= regs_i.dsp_ctnr1_monit_cfir_i;
      end if;
    end if;
  end process;


-- Monit. PFIR incorrect counter for channels 0/1/2/3 (multiplexed)
-- asynchronous std_logic_vector register : Monit. PFIR incorrect counter for channels 0/1/2/3 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_ctnr2_monit_pfir_lwb_s0 <= '0';
      pos_calc_dsp_ctnr2_monit_pfir_lwb_s1 <= '0';
      pos_calc_dsp_ctnr2_monit_pfir_lwb_s2 <= '0';
      pos_calc_dsp_ctnr2_monit_pfir_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr2_monit_pfir_lwb_s0 <= pos_calc_dsp_ctnr2_monit_pfir_lwb;
      pos_calc_dsp_ctnr2_monit_pfir_lwb_s1 <= pos_calc_dsp_ctnr2_monit_pfir_lwb_s0;
      pos_calc_dsp_ctnr2_monit_pfir_lwb_s2 <= pos_calc_dsp_ctnr2_monit_pfir_lwb_s1;
      if ((pos_calc_dsp_ctnr2_monit_pfir_lwb_s1 = '1') and (pos_calc_dsp_ctnr2_monit_pfir_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr2_monit_pfir_int <= regs_i.dsp_ctnr2_monit_pfir_i;
      end if;
    end if;
  end process;


-- Monit. 0.1 Hz incorrect counter for channels 0/1/2/3 (multiplexed)
-- asynchronous std_logic_vector register : Monit. 0.1 Hz incorrect counter for channels 0/1/2/3 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_s0 <= '0';
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_s1 <= '0';
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_s2 <= '0';
      pos_calc_dsp_ctnr2_monit_fir_01_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_s0 <= pos_calc_dsp_ctnr2_monit_fir_01_lwb;
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_s1 <= pos_calc_dsp_ctnr2_monit_fir_01_lwb_s0;
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_s2 <= pos_calc_dsp_ctnr2_monit_fir_01_lwb_s1;
      if ((pos_calc_dsp_ctnr2_monit_fir_01_lwb_s1 = '1') and (pos_calc_dsp_ctnr2_monit_fir_01_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr2_monit_fir_01_int <= regs_i.dsp_ctnr2_monit_fir_01_i;
      end if;
    end if;
  end process;


-- Clear TBT error counters
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      regs_o.dsp_err_clr_tbt_o <= '0';
      pos_calc_dsp_err_clr_tbt_sync0 <= '0';
      pos_calc_dsp_err_clr_tbt_sync1 <= '0';
      pos_calc_dsp_err_clr_tbt_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_err_clr_tbt_sync0 <= pos_calc_dsp_err_clr_tbt_int;
      pos_calc_dsp_err_clr_tbt_sync1 <= pos_calc_dsp_err_clr_tbt_sync0;
      pos_calc_dsp_err_clr_tbt_sync2 <= pos_calc_dsp_err_clr_tbt_sync1;
      regs_o.dsp_err_clr_tbt_o <= pos_calc_dsp_err_clr_tbt_sync2 and (not pos_calc_dsp_err_clr_tbt_sync1);
    end if;
  end process;


-- Clear FOFB error counters
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      regs_o.dsp_err_clr_fofb_o <= '0';
      pos_calc_dsp_err_clr_fofb_sync0 <= '0';
      pos_calc_dsp_err_clr_fofb_sync1 <= '0';
      pos_calc_dsp_err_clr_fofb_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_err_clr_fofb_sync0 <= pos_calc_dsp_err_clr_fofb_int;
      pos_calc_dsp_err_clr_fofb_sync1 <= pos_calc_dsp_err_clr_fofb_sync0;
      pos_calc_dsp_err_clr_fofb_sync2 <= pos_calc_dsp_err_clr_fofb_sync1;
      regs_o.dsp_err_clr_fofb_o <= pos_calc_dsp_err_clr_fofb_sync2 and (not pos_calc_dsp_err_clr_fofb_sync1);
    end if;
  end process;


-- Clear Monit. CIC and CFIR error counters
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      regs_o.dsp_err_clr_monit_part1_o <= '0';
      pos_calc_dsp_err_clr_monit_part1_sync0 <= '0';
      pos_calc_dsp_err_clr_monit_part1_sync1 <= '0';
      pos_calc_dsp_err_clr_monit_part1_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_err_clr_monit_part1_sync0 <= pos_calc_dsp_err_clr_monit_part1_int;
      pos_calc_dsp_err_clr_monit_part1_sync1 <= pos_calc_dsp_err_clr_monit_part1_sync0;
      pos_calc_dsp_err_clr_monit_part1_sync2 <= pos_calc_dsp_err_clr_monit_part1_sync1;
      regs_o.dsp_err_clr_monit_part1_o <= pos_calc_dsp_err_clr_monit_part1_sync2 and (not pos_calc_dsp_err_clr_monit_part1_sync1);
    end if;
  end process;


-- Clear Monit. PFIR and Monit. 0.1 error counters
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      regs_o.dsp_err_clr_monit_part2_o <= '0';
      pos_calc_dsp_err_clr_monit_part2_sync0 <= '0';
      pos_calc_dsp_err_clr_monit_part2_sync1 <= '0';
      pos_calc_dsp_err_clr_monit_part2_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_err_clr_monit_part2_sync0 <= pos_calc_dsp_err_clr_monit_part2_int;
      pos_calc_dsp_err_clr_monit_part2_sync1 <= pos_calc_dsp_err_clr_monit_part2_sync0;
      pos_calc_dsp_err_clr_monit_part2_sync2 <= pos_calc_dsp_err_clr_monit_part2_sync1;
      regs_o.dsp_err_clr_monit_part2_o <= pos_calc_dsp_err_clr_monit_part2_sync2 and (not pos_calc_dsp_err_clr_monit_part2_sync1);
    end if;
  end process;


-- Valid signal for channel 0 DDS
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      regs_o.dds_cfg_valid_ch0_o <= '0';
      pos_calc_dds_cfg_valid_ch0_sync0 <= '0';
      pos_calc_dds_cfg_valid_ch0_sync1 <= '0';
      pos_calc_dds_cfg_valid_ch0_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_cfg_valid_ch0_sync0 <= pos_calc_dds_cfg_valid_ch0_int;
      pos_calc_dds_cfg_valid_ch0_sync1 <= pos_calc_dds_cfg_valid_ch0_sync0;
      pos_calc_dds_cfg_valid_ch0_sync2 <= pos_calc_dds_cfg_valid_ch0_sync1;
      regs_o.dds_cfg_valid_ch0_o <= pos_calc_dds_cfg_valid_ch0_sync2 and (not pos_calc_dds_cfg_valid_ch0_sync1);
    end if;
  end process;


-- Test data counter for all channels
-- synchronizer chain for field : Test data counter for all channels (type RW/RO, clk_sys_i <-> fs_clk2x_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      regs_o.dds_cfg_test_data_o <= '0';
      pos_calc_dds_cfg_test_data_sync0 <= '0';
      pos_calc_dds_cfg_test_data_sync1 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_cfg_test_data_sync0 <= pos_calc_dds_cfg_test_data_int;
      pos_calc_dds_cfg_test_data_sync1 <= pos_calc_dds_cfg_test_data_sync0;
      regs_o.dds_cfg_test_data_o <= pos_calc_dds_cfg_test_data_sync1;
    end if;
  end process;


-- Reserved
-- Valid signal for channel 1 DDS
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      regs_o.dds_cfg_valid_ch1_o <= '0';
      pos_calc_dds_cfg_valid_ch1_sync0 <= '0';
      pos_calc_dds_cfg_valid_ch1_sync1 <= '0';
      pos_calc_dds_cfg_valid_ch1_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_cfg_valid_ch1_sync0 <= pos_calc_dds_cfg_valid_ch1_int;
      pos_calc_dds_cfg_valid_ch1_sync1 <= pos_calc_dds_cfg_valid_ch1_sync0;
      pos_calc_dds_cfg_valid_ch1_sync2 <= pos_calc_dds_cfg_valid_ch1_sync1;
      regs_o.dds_cfg_valid_ch1_o <= pos_calc_dds_cfg_valid_ch1_sync2 and (not pos_calc_dds_cfg_valid_ch1_sync1);
    end if;
  end process;


-- Reserved
-- Valid signal for channel 2 DDS
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      regs_o.dds_cfg_valid_ch2_o <= '0';
      pos_calc_dds_cfg_valid_ch2_sync0 <= '0';
      pos_calc_dds_cfg_valid_ch2_sync1 <= '0';
      pos_calc_dds_cfg_valid_ch2_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_cfg_valid_ch2_sync0 <= pos_calc_dds_cfg_valid_ch2_int;
      pos_calc_dds_cfg_valid_ch2_sync1 <= pos_calc_dds_cfg_valid_ch2_sync0;
      pos_calc_dds_cfg_valid_ch2_sync2 <= pos_calc_dds_cfg_valid_ch2_sync1;
      regs_o.dds_cfg_valid_ch2_o <= pos_calc_dds_cfg_valid_ch2_sync2 and (not pos_calc_dds_cfg_valid_ch2_sync1);
    end if;
  end process;


-- Reserved
-- Valid signal for channel 3 DDS
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      regs_o.dds_cfg_valid_ch3_o <= '0';
      pos_calc_dds_cfg_valid_ch3_sync0 <= '0';
      pos_calc_dds_cfg_valid_ch3_sync1 <= '0';
      pos_calc_dds_cfg_valid_ch3_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_cfg_valid_ch3_sync0 <= pos_calc_dds_cfg_valid_ch3_int;
      pos_calc_dds_cfg_valid_ch3_sync1 <= pos_calc_dds_cfg_valid_ch3_sync0;
      pos_calc_dds_cfg_valid_ch3_sync2 <= pos_calc_dds_cfg_valid_ch3_sync1;
      regs_o.dds_cfg_valid_ch3_o <= pos_calc_dds_cfg_valid_ch3_sync2 and (not pos_calc_dds_cfg_valid_ch3_sync1);
    end if;
  end process;


-- Reserved
-- DDS phase increment parameter register for channel 0
-- asynchronous std_logic_vector register : DDS phase increment parameter register for channel 0 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_pinc_ch0_val_swb_s0 <= '0';
      pos_calc_dds_pinc_ch0_val_swb_s1 <= '0';
      pos_calc_dds_pinc_ch0_val_swb_s2 <= '0';
      regs_o.dds_pinc_ch0_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_pinc_ch0_val_swb_s0 <= pos_calc_dds_pinc_ch0_val_swb;
      pos_calc_dds_pinc_ch0_val_swb_s1 <= pos_calc_dds_pinc_ch0_val_swb_s0;
      pos_calc_dds_pinc_ch0_val_swb_s2 <= pos_calc_dds_pinc_ch0_val_swb_s1;
      if ((pos_calc_dds_pinc_ch0_val_swb_s2 = '0') and (pos_calc_dds_pinc_ch0_val_swb_s1 = '1')) then
        regs_o.dds_pinc_ch0_val_o <= pos_calc_dds_pinc_ch0_val_int;
      end if;
    end if;
  end process;


-- Reserved
-- DDS phase increment parameter register for channel 1
-- asynchronous std_logic_vector register : DDS phase increment parameter register for channel 1 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_pinc_ch1_val_swb_s0 <= '0';
      pos_calc_dds_pinc_ch1_val_swb_s1 <= '0';
      pos_calc_dds_pinc_ch1_val_swb_s2 <= '0';
      regs_o.dds_pinc_ch1_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_pinc_ch1_val_swb_s0 <= pos_calc_dds_pinc_ch1_val_swb;
      pos_calc_dds_pinc_ch1_val_swb_s1 <= pos_calc_dds_pinc_ch1_val_swb_s0;
      pos_calc_dds_pinc_ch1_val_swb_s2 <= pos_calc_dds_pinc_ch1_val_swb_s1;
      if ((pos_calc_dds_pinc_ch1_val_swb_s2 = '0') and (pos_calc_dds_pinc_ch1_val_swb_s1 = '1')) then
        regs_o.dds_pinc_ch1_val_o <= pos_calc_dds_pinc_ch1_val_int;
      end if;
    end if;
  end process;


-- Reserved
-- DDS phase increment parameter register for channel 2
-- asynchronous std_logic_vector register : DDS phase increment parameter register for channel 2 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_pinc_ch2_val_swb_s0 <= '0';
      pos_calc_dds_pinc_ch2_val_swb_s1 <= '0';
      pos_calc_dds_pinc_ch2_val_swb_s2 <= '0';
      regs_o.dds_pinc_ch2_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_pinc_ch2_val_swb_s0 <= pos_calc_dds_pinc_ch2_val_swb;
      pos_calc_dds_pinc_ch2_val_swb_s1 <= pos_calc_dds_pinc_ch2_val_swb_s0;
      pos_calc_dds_pinc_ch2_val_swb_s2 <= pos_calc_dds_pinc_ch2_val_swb_s1;
      if ((pos_calc_dds_pinc_ch2_val_swb_s2 = '0') and (pos_calc_dds_pinc_ch2_val_swb_s1 = '1')) then
        regs_o.dds_pinc_ch2_val_o <= pos_calc_dds_pinc_ch2_val_int;
      end if;
    end if;
  end process;


-- Reserved
-- DDS phase increment parameter register for channel 3
-- asynchronous std_logic_vector register : DDS phase increment parameter register for channel 3 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_pinc_ch3_val_swb_s0 <= '0';
      pos_calc_dds_pinc_ch3_val_swb_s1 <= '0';
      pos_calc_dds_pinc_ch3_val_swb_s2 <= '0';
      regs_o.dds_pinc_ch3_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_pinc_ch3_val_swb_s0 <= pos_calc_dds_pinc_ch3_val_swb;
      pos_calc_dds_pinc_ch3_val_swb_s1 <= pos_calc_dds_pinc_ch3_val_swb_s0;
      pos_calc_dds_pinc_ch3_val_swb_s2 <= pos_calc_dds_pinc_ch3_val_swb_s1;
      if ((pos_calc_dds_pinc_ch3_val_swb_s2 = '0') and (pos_calc_dds_pinc_ch3_val_swb_s1 = '1')) then
        regs_o.dds_pinc_ch3_val_o <= pos_calc_dds_pinc_ch3_val_int;
      end if;
    end if;
  end process;


-- Reserved
-- DDS phase offset parameter register for channel 0
-- asynchronous std_logic_vector register : DDS phase offset parameter register for channel 0 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_poff_ch0_val_swb_s0 <= '0';
      pos_calc_dds_poff_ch0_val_swb_s1 <= '0';
      pos_calc_dds_poff_ch0_val_swb_s2 <= '0';
      regs_o.dds_poff_ch0_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_poff_ch0_val_swb_s0 <= pos_calc_dds_poff_ch0_val_swb;
      pos_calc_dds_poff_ch0_val_swb_s1 <= pos_calc_dds_poff_ch0_val_swb_s0;
      pos_calc_dds_poff_ch0_val_swb_s2 <= pos_calc_dds_poff_ch0_val_swb_s1;
      if ((pos_calc_dds_poff_ch0_val_swb_s2 = '0') and (pos_calc_dds_poff_ch0_val_swb_s1 = '1')) then
        regs_o.dds_poff_ch0_val_o <= pos_calc_dds_poff_ch0_val_int;
      end if;
    end if;
  end process;


-- Reserved
-- DDS phase offset parameter register for channel 1
-- asynchronous std_logic_vector register : DDS phase offset parameter register for channel 1 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_poff_ch1_val_swb_s0 <= '0';
      pos_calc_dds_poff_ch1_val_swb_s1 <= '0';
      pos_calc_dds_poff_ch1_val_swb_s2 <= '0';
      regs_o.dds_poff_ch1_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_poff_ch1_val_swb_s0 <= pos_calc_dds_poff_ch1_val_swb;
      pos_calc_dds_poff_ch1_val_swb_s1 <= pos_calc_dds_poff_ch1_val_swb_s0;
      pos_calc_dds_poff_ch1_val_swb_s2 <= pos_calc_dds_poff_ch1_val_swb_s1;
      if ((pos_calc_dds_poff_ch1_val_swb_s2 = '0') and (pos_calc_dds_poff_ch1_val_swb_s1 = '1')) then
        regs_o.dds_poff_ch1_val_o <= pos_calc_dds_poff_ch1_val_int;
      end if;
    end if;
  end process;


-- Reserved
-- DDS phase offset parameter register for channel 2
-- asynchronous std_logic_vector register : DDS phase offset parameter register for channel 2 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_poff_ch2_val_swb_s0 <= '0';
      pos_calc_dds_poff_ch2_val_swb_s1 <= '0';
      pos_calc_dds_poff_ch2_val_swb_s2 <= '0';
      regs_o.dds_poff_ch2_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_poff_ch2_val_swb_s0 <= pos_calc_dds_poff_ch2_val_swb;
      pos_calc_dds_poff_ch2_val_swb_s1 <= pos_calc_dds_poff_ch2_val_swb_s0;
      pos_calc_dds_poff_ch2_val_swb_s2 <= pos_calc_dds_poff_ch2_val_swb_s1;
      if ((pos_calc_dds_poff_ch2_val_swb_s2 = '0') and (pos_calc_dds_poff_ch2_val_swb_s1 = '1')) then
        regs_o.dds_poff_ch2_val_o <= pos_calc_dds_poff_ch2_val_int;
      end if;
    end if;
  end process;


-- Reserved
-- DDS phase offset parameter register for channel 3
-- asynchronous std_logic_vector register : DDS phase offset parameter register for channel 3 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_dds_poff_ch3_val_swb_s0 <= '0';
      pos_calc_dds_poff_ch3_val_swb_s1 <= '0';
      pos_calc_dds_poff_ch3_val_swb_s2 <= '0';
      regs_o.dds_poff_ch3_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_poff_ch3_val_swb_s0 <= pos_calc_dds_poff_ch3_val_swb;
      pos_calc_dds_poff_ch3_val_swb_s1 <= pos_calc_dds_poff_ch3_val_swb_s0;
      pos_calc_dds_poff_ch3_val_swb_s2 <= pos_calc_dds_poff_ch3_val_swb_s1;
      if ((pos_calc_dds_poff_ch3_val_swb_s2 = '0') and (pos_calc_dds_poff_ch3_val_swb_s1 = '1')) then
        regs_o.dds_poff_ch3_val_o <= pos_calc_dds_poff_ch3_val_int;
      end if;
    end if;
  end process;


-- Reserved
-- Monit. Amplitude Value for channel 0
-- Monit. Amplitude Value for channel 1
-- Monit. Amplitude Value for channel 2
-- Monit. Amplitude Value for channel 3
-- Monit. X Position Value
-- Monit. Y Position Value
-- Monit. Q Position Value
-- Monit. Sum Position Value
-- Monit. Amp/Pos Update (ignore on read)
-- pass-through field: Monit. Amp/Pos Update (ignore on read) in register: Monit. Amp/Pos update trigger
  regs_o.dsp_monit_updt_o <= wrdata_reg(31 downto 0);
-- extra code for reg/fifo/mem: AMP FIFO Monitoring
  pos_calc_ampfifo_monit_in_int(31 downto 0) <= regs_i.ampfifo_monit_amp_ch0_i;
  pos_calc_ampfifo_monit_in_int(63 downto 32) <= regs_i.ampfifo_monit_amp_ch1_i;
  pos_calc_ampfifo_monit_in_int(95 downto 64) <= regs_i.ampfifo_monit_amp_ch2_i;
  pos_calc_ampfifo_monit_in_int(127 downto 96) <= regs_i.ampfifo_monit_amp_ch3_i;
  pos_calc_ampfifo_monit_rst_n <= rst_n_i;
  pos_calc_ampfifo_monit_INST : wbgen2_fifo_sync
    generic map (
      g_size               => 16,
      g_width              => 128,
      g_usedw_size         => 4
    )
    port map (
      wr_req_i             => regs_i.ampfifo_monit_wr_req_i,
      wr_full_o            => regs_o.ampfifo_monit_wr_full_o,
      wr_empty_o           => regs_o.ampfifo_monit_wr_empty_o,
      wr_usedw_o           => regs_o.ampfifo_monit_wr_usedw_o,
      rd_full_o            => pos_calc_ampfifo_monit_full_int,
      rd_empty_o           => pos_calc_ampfifo_monit_empty_int,
      rd_usedw_o           => pos_calc_ampfifo_monit_usedw_int,
      rd_req_i             => pos_calc_ampfifo_monit_rdreq_int,
      rst_n_i              => pos_calc_ampfifo_monit_rst_n,
      clk_i                => clk_sys_i,
      wr_data_i            => pos_calc_ampfifo_monit_in_int,
      rd_data_o            => pos_calc_ampfifo_monit_out_int
    );

-- extra code for reg/fifo/mem: POS FIFO Monitoring
  pos_calc_posfifo_monit_in_int(31 downto 0) <= regs_i.posfifo_monit_pos_x_i;
  pos_calc_posfifo_monit_in_int(63 downto 32) <= regs_i.posfifo_monit_pos_y_i;
  pos_calc_posfifo_monit_in_int(95 downto 64) <= regs_i.posfifo_monit_pos_q_i;
  pos_calc_posfifo_monit_in_int(127 downto 96) <= regs_i.posfifo_monit_pos_sum_i;
  pos_calc_posfifo_monit_rst_n <= rst_n_i;
  pos_calc_posfifo_monit_INST : wbgen2_fifo_sync
    generic map (
      g_size               => 16,
      g_width              => 128,
      g_usedw_size         => 4
    )
    port map (
      wr_req_i             => regs_i.posfifo_monit_wr_req_i,
      wr_full_o            => regs_o.posfifo_monit_wr_full_o,
      wr_empty_o           => regs_o.posfifo_monit_wr_empty_o,
      wr_usedw_o           => regs_o.posfifo_monit_wr_usedw_o,
      rd_full_o            => pos_calc_posfifo_monit_full_int,
      rd_empty_o           => pos_calc_posfifo_monit_empty_int,
      rd_usedw_o           => pos_calc_posfifo_monit_usedw_int,
      rd_req_i             => pos_calc_posfifo_monit_rdreq_int,
      rst_n_i              => pos_calc_posfifo_monit_rst_n,
      clk_i                => clk_sys_i,
      wr_data_i            => pos_calc_posfifo_monit_in_int,
      rd_data_o            => pos_calc_posfifo_monit_out_int
    );

-- Monit. 1 Amplitude Value for channel 0
-- Monit. 1 Amplitude Value for channel 1
-- Monit. 1 Amplitude Value for channel 2
-- Monit. 1 Amplitude Value for channel 3
-- Monit. 1 X Position Value
-- Monit. 1 Y Position Value
-- Monit. 1 Q Position Value
-- Monit. 1 Sum Position Value
-- Monit. 1 Amp/Pos Update (ignore on read)
-- pass-through field: Monit. 1 Amp/Pos Update (ignore on read) in register: Monit. 1 Amp/Pos update trigger
  regs_o.dsp_monit1_updt_o <= wrdata_reg(31 downto 0);
-- extra code for reg/fifo/mem: AMP FIFO Monitoring 1
  pos_calc_ampfifo_monit1_in_int(31 downto 0) <= regs_i.ampfifo_monit1_amp_ch0_i;
  pos_calc_ampfifo_monit1_in_int(63 downto 32) <= regs_i.ampfifo_monit1_amp_ch1_i;
  pos_calc_ampfifo_monit1_in_int(95 downto 64) <= regs_i.ampfifo_monit1_amp_ch2_i;
  pos_calc_ampfifo_monit1_in_int(127 downto 96) <= regs_i.ampfifo_monit1_amp_ch3_i;
  pos_calc_ampfifo_monit1_rst_n <= rst_n_i;
  pos_calc_ampfifo_monit1_INST : wbgen2_fifo_sync
    generic map (
      g_size               => 16,
      g_width              => 128,
      g_usedw_size         => 4
    )
    port map (
      wr_req_i             => regs_i.ampfifo_monit1_wr_req_i,
      wr_full_o            => regs_o.ampfifo_monit1_wr_full_o,
      wr_empty_o           => regs_o.ampfifo_monit1_wr_empty_o,
      wr_usedw_o           => regs_o.ampfifo_monit1_wr_usedw_o,
      rd_full_o            => pos_calc_ampfifo_monit1_full_int,
      rd_empty_o           => pos_calc_ampfifo_monit1_empty_int,
      rd_usedw_o           => pos_calc_ampfifo_monit1_usedw_int,
      rd_req_i             => pos_calc_ampfifo_monit1_rdreq_int,
      rst_n_i              => pos_calc_ampfifo_monit1_rst_n,
      clk_i                => clk_sys_i,
      wr_data_i            => pos_calc_ampfifo_monit1_in_int,
      rd_data_o            => pos_calc_ampfifo_monit1_out_int
    );

-- extra code for reg/fifo/mem: POS FIFO Monitoring 1
  pos_calc_posfifo_monit1_in_int(31 downto 0) <= regs_i.posfifo_monit1_pos_x_i;
  pos_calc_posfifo_monit1_in_int(63 downto 32) <= regs_i.posfifo_monit1_pos_y_i;
  pos_calc_posfifo_monit1_in_int(95 downto 64) <= regs_i.posfifo_monit1_pos_q_i;
  pos_calc_posfifo_monit1_in_int(127 downto 96) <= regs_i.posfifo_monit1_pos_sum_i;
  pos_calc_posfifo_monit1_rst_n <= rst_n_i;
  pos_calc_posfifo_monit1_INST : wbgen2_fifo_sync
    generic map (
      g_size               => 16,
      g_width              => 128,
      g_usedw_size         => 4
    )
    port map (
      wr_req_i             => regs_i.posfifo_monit1_wr_req_i,
      wr_full_o            => regs_o.posfifo_monit1_wr_full_o,
      wr_empty_o           => regs_o.posfifo_monit1_wr_empty_o,
      wr_usedw_o           => regs_o.posfifo_monit1_wr_usedw_o,
      rd_full_o            => pos_calc_posfifo_monit1_full_int,
      rd_empty_o           => pos_calc_posfifo_monit1_empty_int,
      rd_usedw_o           => pos_calc_posfifo_monit1_usedw_int,
      rd_req_i             => pos_calc_posfifo_monit1_rdreq_int,
      rst_n_i              => pos_calc_posfifo_monit1_rst_n,
      clk_i                => clk_sys_i,
      wr_data_i            => pos_calc_posfifo_monit1_in_int,
      rd_data_o            => pos_calc_posfifo_monit1_out_int
    );

-- extra code for reg/fifo/mem: FIFO 'AMP FIFO Monitoring' data output register 0
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_ampfifo_monit_rdreq_int_d0 <= '0';
    elsif rising_edge(clk_sys_i) then
      pos_calc_ampfifo_monit_rdreq_int_d0 <= pos_calc_ampfifo_monit_rdreq_int;
    end if;
  end process;


-- extra code for reg/fifo/mem: FIFO 'AMP FIFO Monitoring' data output register 1
-- extra code for reg/fifo/mem: FIFO 'AMP FIFO Monitoring' data output register 2
-- extra code for reg/fifo/mem: FIFO 'AMP FIFO Monitoring' data output register 3
-- extra code for reg/fifo/mem: FIFO 'POS FIFO Monitoring' data output register 0
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_posfifo_monit_rdreq_int_d0 <= '0';
    elsif rising_edge(clk_sys_i) then
      pos_calc_posfifo_monit_rdreq_int_d0 <= pos_calc_posfifo_monit_rdreq_int;
    end if;
  end process;


-- extra code for reg/fifo/mem: FIFO 'POS FIFO Monitoring' data output register 1
-- extra code for reg/fifo/mem: FIFO 'POS FIFO Monitoring' data output register 2
-- extra code for reg/fifo/mem: FIFO 'POS FIFO Monitoring' data output register 3
-- extra code for reg/fifo/mem: FIFO 'AMP FIFO Monitoring 1' data output register 0
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_ampfifo_monit1_rdreq_int_d0 <= '0';
    elsif rising_edge(clk_sys_i) then
      pos_calc_ampfifo_monit1_rdreq_int_d0 <= pos_calc_ampfifo_monit1_rdreq_int;
    end if;
  end process;


-- extra code for reg/fifo/mem: FIFO 'AMP FIFO Monitoring 1' data output register 1
-- extra code for reg/fifo/mem: FIFO 'AMP FIFO Monitoring 1' data output register 2
-- extra code for reg/fifo/mem: FIFO 'AMP FIFO Monitoring 1' data output register 3
-- extra code for reg/fifo/mem: FIFO 'POS FIFO Monitoring 1' data output register 0
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_posfifo_monit1_rdreq_int_d0 <= '0';
    elsif rising_edge(clk_sys_i) then
      pos_calc_posfifo_monit1_rdreq_int_d0 <= pos_calc_posfifo_monit1_rdreq_int;
    end if;
  end process;


-- extra code for reg/fifo/mem: FIFO 'POS FIFO Monitoring 1' data output register 1
-- extra code for reg/fifo/mem: FIFO 'POS FIFO Monitoring 1' data output register 2
-- extra code for reg/fifo/mem: FIFO 'POS FIFO Monitoring 1' data output register 3
-- Tag Synchronization Enable
-- synchronizer chain for field : Tag Synchronization Enable (type RW/RO, clk_sys_i <-> fs_clk2x_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      regs_o.sw_tag_en_o <= '0';
      pos_calc_sw_tag_en_sync0 <= '0';
      pos_calc_sw_tag_en_sync1 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_sw_tag_en_sync0 <= pos_calc_sw_tag_en_int;
      pos_calc_sw_tag_en_sync1 <= pos_calc_sw_tag_en_sync0;
      regs_o.sw_tag_en_o <= pos_calc_sw_tag_en_sync1;
    end if;
  end process;


-- Switching Desynchronization Counter Reset
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      regs_o.sw_tag_desync_cnt_rst_o <= '0';
      pos_calc_sw_tag_desync_cnt_rst_sync0 <= '0';
      pos_calc_sw_tag_desync_cnt_rst_sync1 <= '0';
      pos_calc_sw_tag_desync_cnt_rst_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_sw_tag_desync_cnt_rst_sync0 <= pos_calc_sw_tag_desync_cnt_rst_int;
      pos_calc_sw_tag_desync_cnt_rst_sync1 <= pos_calc_sw_tag_desync_cnt_rst_sync0;
      pos_calc_sw_tag_desync_cnt_rst_sync2 <= pos_calc_sw_tag_desync_cnt_rst_sync1;
      regs_o.sw_tag_desync_cnt_rst_o <= pos_calc_sw_tag_desync_cnt_rst_sync2 and (not pos_calc_sw_tag_desync_cnt_rst_sync1);
    end if;
  end process;


-- Switching Desynchronization Counter
-- asynchronous std_logic_vector register : Switching Desynchronization Counter (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_sw_tag_desync_cnt_lwb_s0 <= '0';
      pos_calc_sw_tag_desync_cnt_lwb_s1 <= '0';
      pos_calc_sw_tag_desync_cnt_lwb_s2 <= '0';
      pos_calc_sw_tag_desync_cnt_int <= "00000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_sw_tag_desync_cnt_lwb_s0 <= pos_calc_sw_tag_desync_cnt_lwb;
      pos_calc_sw_tag_desync_cnt_lwb_s1 <= pos_calc_sw_tag_desync_cnt_lwb_s0;
      pos_calc_sw_tag_desync_cnt_lwb_s2 <= pos_calc_sw_tag_desync_cnt_lwb_s1;
      if ((pos_calc_sw_tag_desync_cnt_lwb_s1 = '1') and (pos_calc_sw_tag_desync_cnt_lwb_s2 = '0')) then
        pos_calc_sw_tag_desync_cnt_int <= regs_i.sw_tag_desync_cnt_i;
      end if;
    end if;
  end process;


-- Switching Data Mask Enable
-- synchronizer chain for field : Switching Data Mask Enable (type RW/RO, clk_sys_i <-> fs_clk2x_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      regs_o.sw_data_mask_en_o <= '0';
      pos_calc_sw_data_mask_en_sync0 <= '0';
      pos_calc_sw_data_mask_en_sync1 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_sw_data_mask_en_sync0 <= pos_calc_sw_data_mask_en_int;
      pos_calc_sw_data_mask_en_sync1 <= pos_calc_sw_data_mask_en_sync0;
      regs_o.sw_data_mask_en_o <= pos_calc_sw_data_mask_en_sync1;
    end if;
  end process;


-- Switching Data Mask Samples
-- asynchronous std_logic_vector register : Switching Data Mask Samples (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_sw_data_mask_samples_swb_s0 <= '0';
      pos_calc_sw_data_mask_samples_swb_s1 <= '0';
      pos_calc_sw_data_mask_samples_swb_s2 <= '0';
      regs_o.sw_data_mask_samples_o <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_sw_data_mask_samples_swb_s0 <= pos_calc_sw_data_mask_samples_swb;
      pos_calc_sw_data_mask_samples_swb_s1 <= pos_calc_sw_data_mask_samples_swb_s0;
      pos_calc_sw_data_mask_samples_swb_s2 <= pos_calc_sw_data_mask_samples_swb_s1;
      if ((pos_calc_sw_data_mask_samples_swb_s2 = '0') and (pos_calc_sw_data_mask_samples_swb_s1 = '1')) then
        regs_o.sw_data_mask_samples_o <= pos_calc_sw_data_mask_samples_int;
      end if;
    end if;
  end process;

-- TbT Synchronizing Trigger Enable
-- synchronizer chain for field : TbT Synchronizing Trigger Enable (type RW/RO, clk_sys_i <-> fs_clk2x_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      regs_o.tbt_tag_en_o <= '0';
      pos_calc_tbt_tag_en_sync0 <= '0';
      pos_calc_tbt_tag_en_sync1 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_tbt_tag_en_sync0 <= pos_calc_tbt_tag_en_int;
      pos_calc_tbt_tag_en_sync1 <= pos_calc_tbt_tag_en_sync0;
      regs_o.tbt_tag_en_o <= pos_calc_tbt_tag_en_sync1;
    end if;
  end process;


-- TbT Synchronizing Trigger Delay
-- asynchronous std_logic_vector register : TbT Synchronizing Trigger Delay (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_tbt_tag_dly_swb_s0 <= '0';
      pos_calc_tbt_tag_dly_swb_s1 <= '0';
      pos_calc_tbt_tag_dly_swb_s2 <= '0';
      regs_o.tbt_tag_dly_o <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_tbt_tag_dly_swb_s0 <= pos_calc_tbt_tag_dly_swb;
      pos_calc_tbt_tag_dly_swb_s1 <= pos_calc_tbt_tag_dly_swb_s0;
      pos_calc_tbt_tag_dly_swb_s2 <= pos_calc_tbt_tag_dly_swb_s1;
      if ((pos_calc_tbt_tag_dly_swb_s2 = '0') and (pos_calc_tbt_tag_dly_swb_s1 = '1')) then
        regs_o.tbt_tag_dly_o <= pos_calc_tbt_tag_dly_int;
      end if;
    end if;
  end process;


-- TbT Desynchronization Counter Reset
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      regs_o.tbt_tag_desync_cnt_rst_o <= '0';
      pos_calc_tbt_tag_desync_cnt_rst_sync0 <= '0';
      pos_calc_tbt_tag_desync_cnt_rst_sync1 <= '0';
      pos_calc_tbt_tag_desync_cnt_rst_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_tbt_tag_desync_cnt_rst_sync0 <= pos_calc_tbt_tag_desync_cnt_rst_int;
      pos_calc_tbt_tag_desync_cnt_rst_sync1 <= pos_calc_tbt_tag_desync_cnt_rst_sync0;
      pos_calc_tbt_tag_desync_cnt_rst_sync2 <= pos_calc_tbt_tag_desync_cnt_rst_sync1;
      regs_o.tbt_tag_desync_cnt_rst_o <= pos_calc_tbt_tag_desync_cnt_rst_sync2 and (not pos_calc_tbt_tag_desync_cnt_rst_sync1);
    end if;
  end process;


-- TbT Desynchronization Counter
-- asynchronous std_logic_vector register : TbT Desynchronization Counter (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_tbt_tag_desync_cnt_lwb_s0 <= '0';
      pos_calc_tbt_tag_desync_cnt_lwb_s1 <= '0';
      pos_calc_tbt_tag_desync_cnt_lwb_s2 <= '0';
      pos_calc_tbt_tag_desync_cnt_int <= "00000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_tbt_tag_desync_cnt_lwb_s0 <= pos_calc_tbt_tag_desync_cnt_lwb;
      pos_calc_tbt_tag_desync_cnt_lwb_s1 <= pos_calc_tbt_tag_desync_cnt_lwb_s0;
      pos_calc_tbt_tag_desync_cnt_lwb_s2 <= pos_calc_tbt_tag_desync_cnt_lwb_s1;
      if ((pos_calc_tbt_tag_desync_cnt_lwb_s1 = '1') and (pos_calc_tbt_tag_desync_cnt_lwb_s2 = '0')) then
        pos_calc_tbt_tag_desync_cnt_int <= regs_i.tbt_tag_desync_cnt_i;
      end if;
    end if;
  end process;


-- TbT Masking Enable
-- synchronizer chain for field : TbT Masking Enable (type RW/RO, clk_sys_i <-> fs_clk2x_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      regs_o.tbt_data_mask_ctl_en_o <= '0';
      pos_calc_tbt_data_mask_ctl_en_sync0 <= '0';
      pos_calc_tbt_data_mask_ctl_en_sync1 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_tbt_data_mask_ctl_en_sync0 <= pos_calc_tbt_data_mask_ctl_en_int;
      pos_calc_tbt_data_mask_ctl_en_sync1 <= pos_calc_tbt_data_mask_ctl_en_sync0;
      regs_o.tbt_data_mask_ctl_en_o <= pos_calc_tbt_data_mask_ctl_en_sync1;
    end if;
  end process;


-- TbT Beginning Data Masking Samples
-- asynchronous std_logic_vector register : TbT Beginning Data Masking Samples (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_tbt_data_mask_samples_beg_swb_s0 <= '0';
      pos_calc_tbt_data_mask_samples_beg_swb_s1 <= '0';
      pos_calc_tbt_data_mask_samples_beg_swb_s2 <= '0';
      regs_o.tbt_data_mask_samples_beg_o <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_tbt_data_mask_samples_beg_swb_s0 <= pos_calc_tbt_data_mask_samples_beg_swb;
      pos_calc_tbt_data_mask_samples_beg_swb_s1 <= pos_calc_tbt_data_mask_samples_beg_swb_s0;
      pos_calc_tbt_data_mask_samples_beg_swb_s2 <= pos_calc_tbt_data_mask_samples_beg_swb_s1;
      if ((pos_calc_tbt_data_mask_samples_beg_swb_s2 = '0') and (pos_calc_tbt_data_mask_samples_beg_swb_s1 = '1')) then
        regs_o.tbt_data_mask_samples_beg_o <= pos_calc_tbt_data_mask_samples_beg_int;
      end if;
    end if;
  end process;


-- TbT Beginning Data Masking Samples
-- asynchronous std_logic_vector register : TbT Beginning Data Masking Samples (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      pos_calc_tbt_data_mask_samples_end_swb_s0 <= '0';
      pos_calc_tbt_data_mask_samples_end_swb_s1 <= '0';
      pos_calc_tbt_data_mask_samples_end_swb_s2 <= '0';
      regs_o.tbt_data_mask_samples_end_o <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_tbt_data_mask_samples_end_swb_s0 <= pos_calc_tbt_data_mask_samples_end_swb;
      pos_calc_tbt_data_mask_samples_end_swb_s1 <= pos_calc_tbt_data_mask_samples_end_swb_s0;
      pos_calc_tbt_data_mask_samples_end_swb_s2 <= pos_calc_tbt_data_mask_samples_end_swb_s1;
      if ((pos_calc_tbt_data_mask_samples_end_swb_s2 = '0') and (pos_calc_tbt_data_mask_samples_end_swb_s1 = '1')) then
        regs_o.tbt_data_mask_samples_end_o <= pos_calc_tbt_data_mask_samples_end_int;
      end if;
    end if;
  end process;


  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
